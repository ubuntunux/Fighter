{'binary_data': b'\x80\x03cnumpy.core.multiarray\n_reconstruct\nq\x00cnumpy\nndarray\nq\x01K\x00\x85q\x02C\x01bq\x03\x87q\x04Rq'
                b'\x05(K\x01J-\x14\x01\x00\x85q\x06cnumpy\ndtype\nq\x07X\x02\x00\x00\x00u1q\x08K\x00K\x01\x87q\tRq\n(K'
                b'\x03X\x01\x00\x00\x00|q\x0bNNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00tq\x0cb\x89B-\x14\x01\x00\n\x00'
                b'\x00\x00\n8\xe7H\x9e\xd0\xc8\xd7\xa0>bb\x106\xac\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x80\x18'
                b'\x00\x00-\x14\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00r\x00\x00\x00r\x00\x00\x00r\x00\x00\x00\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xcb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00!\t\x00\x00 \x00\x00\x00\x93\x0c'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00\x15\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x83\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x08\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xba\x00\x00\x00\x1d\x00'
                b'\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00-\x14\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\xbfu'
                b'\x85\x9369\xb6\x8d\xbfu\x85\x9369\xb6\x8dt\xbe\x82\x92C\x13%\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x83\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\t\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00'
                b'\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\n\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00'
                b'\x00\x00\x00\x01\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00+\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x01\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0f\x00\x00\x00C\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00'
                b'\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00S\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x98\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00`\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x04\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00m\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00'
                b'\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa0\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00{\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00'
                b'\x00\x00\x87\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x97\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\xa5\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01'
                b'\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\xb3\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\xc2\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\xcc\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14'
                b'\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xd5\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14'
                b'\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xe9\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14'
                b'\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xfd\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00S\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x04\x14\x00\x00\x01\x00'
                b'\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00'
                b'\x00\x00\x11\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x01\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00 \x01\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x14\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x1c\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x008\x01\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00G\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\xdc\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00X\x01'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00u\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x86\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x19\x00\x00\x00\x98\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd4\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x17\x00\x00\x00\xb2\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\xca\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x12\x00\x00\x00\xe1\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\xf4\x01'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x07\x02'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x18\x02\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00/\x02\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00C\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00X\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00s\x02'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x90\x02'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00|\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\xab\x02\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\xcb\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00'
                b'\x00\x00\xeb\x02\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x08\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00%\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1c\x00\x00\x00F\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00c\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x82\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xa2\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01'
                b'\x00\x00\xec\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\xc1\x03'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xd9\x03\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xa0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\xf8\x03\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x17\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x1e\x00\x00\x006\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00'
                b'\x00\x00\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00U\x04'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xe0\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00q\x04\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x8d\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xa7\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x05\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x05\x14\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\xd0\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xbe\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\xd4\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xe8\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xff\x04\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00'
                b'\x00\x00\x16\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00,\x05\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00@\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00W\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00n\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\x84\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x98\x05'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00L\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xaf\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\\\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xc6\x05\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xdc\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xf0\x05\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00l\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x07\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00|\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x1e\x06\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x004\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x90\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00H\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00_\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00v\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xa0\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x8c\x06\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xb0\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xa0\x06\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xac\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\xb7\x06\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xbc\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\xce\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xe4\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\xf8\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xcc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\x0f\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xdc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x15\x00\x00\x00&\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00<\x07'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xf0\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00P\x07\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xec\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00g\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00~\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x13\x00\x00\x00\x94\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x10\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xa8\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x0c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00'
                b'\x00\x00\xbf\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x03\x00'
                b'\x00\x00\x00\x01\x00\x00\x1c\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00'
                b'\x00\x00\xd6\x07\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00 \x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\xec\x07\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\x03\x00\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x000\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x06\x14\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00,\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x16\x00\x00\x00\x17\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14'
                b'\x00\x00\x03\x00\x00\x00\x00\x01\x00\x00<\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00.\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00@\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00C\x08\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00N\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b'
                b'\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\n\x00\x00\x00Z\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\x04\x00\x00\x00\x00\x01'
                b'\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00e\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00'
                b'\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00\x10\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00q\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x14'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x04\x14\x00\x00\x04\x00\x00\x00\x00\x01\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\r\x00\x00\x00\x86\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x00\x00'
                b'\x00\x00\x00\x01\x00\x000\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x94\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x04\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x99\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x03\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x9e\x08'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\xa8\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\xb3\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x06\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x8c\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\xc0\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x05\x00\x00\x00\x00\x01\x00\x00\x80\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\xcc\x08\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\x06\x00\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00'
                b'\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\xdc\x08\x00\x00d\x00\x00\x00\x01\x00'
                b'\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00'
                b'\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x01\xf7\x98lU\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\r\x00\x00\x00\xed\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00V\x8b\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00V\x8b\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff@\x06\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\xff\x00\x00\x00%\x03\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x08\x01\xf7\x98lU\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\xfb\x08\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x10\x00'
                b'\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffA\x06'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00e\x00'
                b'\x00\x00\x00\x00\x00\x00X\xff\xf6\x98lU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x01\t'
                b'\x00\x00d\x00\x00\x00\x01\x00\x00\x00\\\x8b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x10\x00\x00\x00\x10\x00\x00\x00\x06\x14\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffQ\x06\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00'
                b'\x00\x00\x94\x01\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x17\t\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x06\x14'
                b'\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x91\x0c'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xff\x00\x00\x00$\x03\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xca\x00'
                b'\x00\x00\x00\x00\x00\x000\x00\xf7\x98lU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00'
                b'\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00'
                b'\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00'
                b'\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00'
                b'\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00'
                b'\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00'
                b'\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00'
                b'\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00'
                b'\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00'
                b'\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00'
                b'\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00'
                b'\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00'
                b'\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00'
                b'\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00'
                b'\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00'
                b'\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00'
                b'\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00'
                b'\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00'
                b'\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00'
                b'\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00'
                b'\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00'
                b'\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00'
                b'\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00'
                b'\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00'
                b'\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00'
                b'\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00'
                b'\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00'
                b'\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00'
                b'\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00\xc8\x00'
                b'\x00\x00\xc9\x00\x00\x00\xca\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00'
                b'\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00m\x00\x00\x00n\x00'
                b'\x00\x00o\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00'
                b'\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00p\x00\x00\x00q\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00BACKBUFFER_SIZE\x00CAMERA_POSITION\x00DELTA_TIME\x00INV_PROJECT'
                b'ION\x00INV_VIEW\x00INV_VIEW_ORIGIN\x00JITTER_DELTA\x00JITTER_FRAME\x00JITTER_OFFSET\x00LIGHT_COLOR\x00LIGHT_D'
                b'IRECTION\x00LIGHT_DUMMY_0\x00LIGHT_DUMMY_1\x00LIGHT_POSITION\x00MOUSE_POS\x00NEAR_FAR\x00PARTICLE_ALIGN_MO'
                b'DE\x00PARTICLE_BLEND_MODE\x00PARTICLE_CELL_COUNT\x00PARTICLE_COLOR\x00PARTICLE_COMMON_DUMMY_0\x00PARTICLE_D'
                b'ELAY\x00PARTICLE_DUMMY_0\x00PARTICLE_ENABLE_VECTOR_FIELD\x00PARTICLE_FADE_IN\x00PARTICLE_FADE_OUT\x00PARTIC'
                b'LE_FORCE_ELASTICITY\x00PARTICLE_FORCE_FRICTION\x00PARTICLE_FORCE_GRAVITY\x00PARTICLE_LIFE_TIME\x00PARTICLE_M'
                b'AX_COUNT\x00PARTICLE_OPACITY\x00PARTICLE_PARENT_MATRIX\x00PARTICLE_PLAY_SPEED\x00PARTICLE_SPAWN_COUNT\x00PA'
                b'RTICLE_SPAWN_VOLUME_INFO\x00PARTICLE_SPAWN_VOLUME_MATRIX\x00PARTICLE_SPAWN_VOLUME_TYPE\x00PARTICLE_TRANSFORM_'
                b'ROTATION_MAX\x00PARTICLE_TRANSFORM_ROTATION_MIN\x00PARTICLE_TRANSFORM_SCALE_MAX\x00PARTICLE_TRANSFORM_SCALE_M'
                b'IN\x00PARTICLE_VECTOR_FIELD_INV_MATRIX\x00PARTICLE_VECTOR_FIELD_MATRIX\x00PARTICLE_VECTOR_FIELD_STRENGTH\x00'
                b'PARTICLE_VECTOR_FIELD_TIGHTNESS\x00PARTICLE_VELOCITY_ACCELERATION\x00PARTICLE_VELOCITY_LIMIT\x00PARTICLE_VELO'
                b'CITY_POSITION_MAX\x00PARTICLE_VELOCITY_POSITION_MIN\x00PARTICLE_VELOCITY_ROTATION_MAX\x00PARTICLE_VELOCITY_RO'
                b'TATION_MIN\x00PARTICLE_VELOCITY_SCALE_MAX\x00PARTICLE_VELOCITY_SCALE_MIN\x00PARTICLE_VELOCITY_STRETCH\x00PAR'
                b'TICLE_VELOCITY_TYPE\x00POINT_LIGHTS[0].color\x00POINT_LIGHTS[0].pos\x00POINT_LIGHTS[0].radius\x00POINT_LIGHT'
                b'S[0].render\x00POINT_LIGHTS[1].color\x00POINT_LIGHTS[1].pos\x00POINT_LIGHTS[1].radius\x00POINT_LIGHTS[1].ren'
                b'der\x00POINT_LIGHTS[2].color\x00POINT_LIGHTS[2].pos\x00POINT_LIGHTS[2].radius\x00POINT_LIGHTS[2].render\x00'
                b'POINT_LIGHTS[3].color\x00POINT_LIGHTS[3].pos\x00POINT_LIGHTS[3].radius\x00POINT_LIGHTS[3].render\x00POINT_LI'
                b'GHTS[4].color\x00POINT_LIGHTS[4].pos\x00POINT_LIGHTS[4].radius\x00POINT_LIGHTS[4].render\x00POINT_LIGHTS[5].'
                b'color\x00POINT_LIGHTS[5].pos\x00POINT_LIGHTS[5].radius\x00POINT_LIGHTS[5].render\x00POINT_LIGHTS[6].colo'
                b'r\x00POINT_LIGHTS[6].pos\x00POINT_LIGHTS[6].radius\x00POINT_LIGHTS[6].render\x00POINT_LIGHTS[7].color\x00PO'
                b'INT_LIGHTS[7].pos\x00POINT_LIGHTS[7].radius\x00POINT_LIGHTS[7].render\x00POINT_LIGHTS[8].color\x00POINT_LIGH'
                b'TS[8].pos\x00POINT_LIGHTS[8].radius\x00POINT_LIGHTS[8].render\x00POINT_LIGHTS[9].color\x00POINT_LIGHTS[9].po'
                b's\x00POINT_LIGHTS[9].radius\x00POINT_LIGHTS[9].render\x00PREV_VIEW_PROJECTION\x00PROJECTION\x00RENDER_S'
                b'SAO\x00RENDER_SSR\x00SCREEN_SIZE\x00SHADOWMAP_LOOP_COUNT\x00SHADOW_MATRIX\x00TIME\x00VIEW\x00VIEWCONSTANTS_DU'
                b'MMY0\x00VIEW_DUMMY_0\x00VIEW_ORIGIN\x00VIEW_PROJECTION\x00bone_matrices[0]\x00is_instancing\x00model\x00prev_'
                b'bone_matrices[0]\x00uv_tiling\x00\x13\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R'
                b"\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00'"
                b'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x003\x00\x00\x00\x07\x00\x00\x00\x04'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00I\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x0e\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q'
                b'\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00e'
                b'\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00s\x00\x00\x00\x04\x00\x00\x00\x01'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00vs_in_bone_indicies\x00vs_in_bone_weights\x00vs_in_color\x00vs_in_isntance_mat'
                b'rix\x00vs_in_normal\x00vs_in_position\x00vs_in_tangent\x00vs_in_tex_coord\x00\x00\x00\x00\x00\x01\x00'
                b'\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00'
                b'\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00)\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x18\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x1a\x00\x00\x007\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\\\x8b\x00\x00\x04\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x13\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00P\x8b\x00\x00\x01\x00\x00\x00\x02\x00'
                b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x16\x00\x00\x00f\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x17\x00\x00\x00}\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x03\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x18\x00\x00\x00\x95\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00Q\x8b\x00\x00\x01\x00\x00\x00\x03\x00'
                b'\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\xff\xff\x00\x00'
                b'\x00\x00\x0b\x00\x00\x00\xae\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff'
                b'\xff\xff\xff\xff\xff\xffvs_output.prev_projection_pos\x00vs_output.projection_pos\x00vs_output.tangent_to_wo'
                b'rld\x00vs_output.tex_coord\x00vs_output.vertex_color\x00vs_output.vertex_normal\x00vs_output.world_posit'
                b'ion\x00gl_Position\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00fs_ouptut\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03'
                b'\x03\xff\xff\xff\xff\xff\xff\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00'
                b'\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x05\x05\xff\xff\xff\xff\xff\xff\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x06\x06\xff\xff\xff\xff\xff\xff\x00\x00\x00\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00/\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x04\x04\xff\xff\xff\xff\xff\xff\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00E\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00U\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x01\x01\xff\xff\xff\xff\xff\xff\x00\x00\x00\xb0\x01\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00d\x00'
                b'\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x02\x02\xff\xff\xff\xff\xff\xff\x00\x00\x00\x80\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00li'
                b'ght_constants\x00particle_common\x00particle_infos\x00point_light_constants\x00scene_constants\x00view_cons'
                b'tants\x00view_projection\x00\x13\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b'
                b"\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00'\x00"
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffR\x8b\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x003\x00\x00\x00\x07\x00\x00\x00\x04\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\\\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00I\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00'
                b'\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x0e\x00\x00\x00V\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b'
                b'\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00e\x00'
                b'\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffQ\x8b\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00s\x00\x00\x00\x04\x00\x00\x00\x01\x00'
                b'\x00\x00\x00\x00\x00\x00\xff\xff\xff\xffP\x8b\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x01\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00vs_in_bone_indicies\x00vs_in_bone_weights\x00vs_in_color\x00vs_in_isntance_matr'
                b'ix\x00vs_in_normal\x00vs_in_position\x00vs_in_tangent\x00vs_in_tex_coord\x00\t\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00R\x8b\x00\x00\x01\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00fs_ouptut\x00\x00{\x1a\x00\x00!!NVvp5.0\nOPTION NV_inte'
                b'rnal;\nOPTION NV_bindless_texture;\nPARAM c[806] = { program.local[0..805] };\nCBUFFER buf0[] = { program.b'
                b'uffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf2[] = { program.buffer[2] };\nCBUFFER buf3'
                b'[] = { program.buffer[3] };\nCBUFFER buf4[] = { program.buffer[4] };\nCBUFFER buf5[] = { program.buffer[5]'
                b' };\nCBUFFER buf6[] = { program.buffer[6] };\nATTRIB vertex_attrib[] = { vertex.attrib[0..10] };\nOUTPUT re'
                b'sult_attrib[] = { result.attrib[0..9] };\nTEMP R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12;\nTEM'
                b'P T;\nTEMP RC;\nSHORT TEMP HC;\nTRUNC.S R0.x, vertex.attrib[5].y;\nMUL.S R0.y, R0.x, {4, 0, 0, 0}.x;\nMOV.S R'
                b'3.x, R0.y;\nMUL.F32 R1, vertex.attrib[0].y, c[R3.x + 405];\nMAD.F32 R1, vertex.attrib[0].x, c[R3.x + 404],'
                b' R1;\nMAD.F32 R1, vertex.attrib[0].z, c[R3.x + 406], R1;\nADD.F32 R1, R1, c[R3.x + 407];\nTRUNC.S R0.x, ver'
                b'tex.attrib[5];\nMUL.S R0.x, R0, {4, 0, 0, 0};\nMOV.S R3.y, R0.x;\nMUL.F32 R0, vertex.attrib[0].y, c[R3.y + '
                b'405];\nMAD.F32 R0, vertex.attrib[0].x, c[R3.y + 404], R0;\nMAD.F32 R0, vertex.attrib[0].z, c[R3.y + 406], '
                b'R0;\nADD.F32 R0, R0, c[R3.y + 407];\nMUL.F32 R1, vertex.attrib[6].y, R1;\nMAD.F32 R2, vertex.attrib[6].x, R'
                b'0, R1;\nTRUNC.S R0.y, vertex.attrib[5].z;\nMUL.S R0.y, R0, {4, 0, 0, 0}.x;\nTRUNC.S R0.x, vertex.attrib[5].'
                b'w;\nMUL.S R0.x, R0, {4, 0, 0, 0};\nMOV.S R3.w, R0.x;\nMOV.S R4.x, R0.y;\nMUL.F32 R0, vertex.attrib[0].y, c[R'
                b'4.x + 405];\nMUL.F32 R1, vertex.attrib[0].y, c[R3.w + 405];\nMAD.F32 R0, vertex.attrib[0].x, c[R4.x + 404]'
                b', R0;\nMAD.F32 R1, vertex.attrib[0].x, c[R3.w + 404], R1;\nMAD.F32 R0, vertex.attrib[0].z, c[R4.x + 406], '
                b'R0;\nMAD.F32 R1, vertex.attrib[0].z, c[R3.w + 406], R1;\nADD.F32 R0, R0, c[R4.x + 407];\nMAD.F32 R0, vertex'
                b'.attrib[6].z, R0, R2;\nADD.F32 R1, R1, c[R3.w + 407];\nMAD.F32 R1, R1, vertex.attrib[6].w, R0;\nMUL.F32 R0,'
                b' vertex.attrib[0].y, c[R3.x + 5];\nDIV.F32 R7, R1, R1.w;\nMAD.F32 R1, vertex.attrib[0].x, c[R3.x + 4], R0;'
                b'\nMUL.F32 R0, vertex.attrib[0].y, c[R3.y + 5];\nMAD.F32 R1, vertex.attrib[0].z, c[R3.x + 6], R1;\nADD.F32 R'
                b'1, R1, c[R3.x + 7];\nMAD.F32 R0, vertex.attrib[0].x, c[R3.y + 4], R0;\nMAD.F32 R0, vertex.attrib[0].z, c[R'
                b'3.y + 6], R0;\nADD.F32 R0, R0, c[R3.y + 7];\nMUL.F32 R1, vertex.attrib[6].y, R1;\nMAD.F32 R2, vertex.attrib'
                b'[6].x, R0, R1;\nMUL.F32 R0, vertex.attrib[0].y, c[R4.x + 5];\nMUL.F32 R1, vertex.attrib[0].y, c[R3.w + 5];'
                b'\nMAD.F32 R0, vertex.attrib[0].x, c[R4.x + 4], R0;\nMAD.F32 R1, vertex.attrib[0].x, c[R3.w + 4], R1;\nMAD.F'
                b'32 R0, vertex.attrib[0].z, c[R4.x + 6], R0;\nMAD.F32 R1, vertex.attrib[0].z, c[R3.w + 6], R1;\nADD.F32 R0,'
                b' R0, c[R4.x + 7];\nMAD.F32 R0, vertex.attrib[6].z, R0, R2;\nADD.F32 R1, R1, c[R3.w + 7];\nMAD.F32 R1, verte'
                b'x.attrib[6].w, R1, R0;\nMUL.F32 R0.xyz, c[R3.x + 5], vertex.attrib[2].y;\nMAD.F32 R0.xyz, c[R3.x + 4], ver'
                b'tex.attrib[2].x, R0;\nMAD.F32 R0.xyz, c[R3.x + 6], vertex.attrib[2].z, R0;\nDIV.F32 R6, R1, R1.w;\nMUL.F32 '
                b'R1.xyz, c[R3.y + 5], vertex.attrib[2].y;\nMAD.F32 R1.xyz, c[R3.y + 4], vertex.attrib[2].x, R1;\nMAD.F32 R1'
                b'.xyz, c[R3.y + 6], vertex.attrib[2].z, R1;\nADD.F32 R0.xyz, R0, {0, 0, 0, 0}.x;\nMUL.F32 R0.xyz, vertex.at'
                b'trib[6].y, R0;\nADD.F32 R1.xyz, R1, {0, 0, 0, 0}.x;\nMAD.F32 R2.xyz, vertex.attrib[6].x, R1, R0;\nMUL.F32 R'
                b'0.xyz, c[R4.x + 5], vertex.attrib[2].y;\nMUL.F32 R1.xyz, c[R3.w + 5], vertex.attrib[2].y;\nMAD.F32 R0.xyz,'
                b' c[R4.x + 4], vertex.attrib[2].x, R0;\nMAD.F32 R1.xyz, c[R3.w + 4], vertex.attrib[2].x, R1;\nMAD.F32 R0.xy'
                b'z, c[R4.x + 6], vertex.attrib[2].z, R0;\nMAD.F32 R1.xyz, c[R3.w + 6], vertex.attrib[2].z, R1;\nADD.F32 R0.'
                b'xyz, R0, {0, 0, 0, 0}.x;\nMAD.F32 R0.xyz, vertex.attrib[6].z, R0, R2;\nADD.F32 R1.xyz, R1, {0, 0, 0, 0}.x;'
                b'\nMAD.F32 R2.xyz, vertex.attrib[6].w, R1, R0;\nMUL.F32 R0.xyz, c[R3.x + 5], vertex.attrib[3].y;\nMAD.F32 R1'
                b'.xyz, c[R3.x + 4], vertex.attrib[3].x, R0;\nMUL.F32 R0.xyz, c[R3.y + 5], vertex.attrib[3].y;\nMAD.F32 R1.x'
                b'yz, c[R3.x + 6], vertex.attrib[3].z, R1;\nMAD.F32 R0.xyz, c[R3.y + 4], vertex.attrib[3].x, R0;\nMAD.F32 R0'
                b'.xyz, c[R3.y + 6], vertex.attrib[3].z, R0;\nDP3.F32 R0.w, R2, R2;\nRSQ.F32 R0.w, R0.w;\nADD.F32 R1.xyz, R1,'
                b' {0, 0, 0, 0}.x;\nMUL.F32 R1.xyz, vertex.attrib[6].y, R1;\nADD.F32 R0.xyz, R0, {0, 0, 0, 0}.x;\nMAD.F32 R3.'
                b'xyz, vertex.attrib[6].x, R0, R1;\nMUL.F32 R0.xyz, c[R4.x + 5], vertex.attrib[3].y;\nMUL.F32 R1.xyz, c[R3.w'
                b' + 5], vertex.attrib[3].y;\nMAD.F32 R0.xyz, c[R4.x + 4], vertex.attrib[3].x, R0;\nMAD.F32 R1.xyz, c[R3.w +'
                b' 4], vertex.attrib[3].x, R1;\nMAD.F32 R0.xyz, c[R4.x + 6], vertex.attrib[3].z, R0;\nMAD.F32 R1.xyz, c[R3.w'
                b' + 6], vertex.attrib[3].z, R1;\nADD.F32 R0.xyz, R0, {0, 0, 0, 0}.x;\nADD.F32 R1.xyz, R1, {0, 0, 0, 0}.x;\nM'
                b'AD.F32 R0.xyz, vertex.attrib[6].z, R0, R3;\nMAD.F32 R0.xyz, vertex.attrib[6].w, R1, R0;\nDP3.F32 R1.x, R0,'
                b' R0;\nMUL.F32 R9.xyz, R0.w, R2;\nRSQ.F32 R0.w, R1.x;\nSNE.U R1.x, c[805], {0, 0, 0, 0};\nMOV.U.CC RC.x, -R1;'
                b'\nMUL.F32 R10.xyz, R0.w, R0;\nIF NE.x;\nMUL.F32 R1, vertex.attrib[7].y, c[1];\nMUL.F32 R0, vertex.attrib[8].'
                b'y, c[1];\nMAD.F32 R1, vertex.attrib[7].x, c[0], R1;\nMAD.F32 R0, vertex.attrib[8].x, c[0], R0;\nMAD.F32 R0,'
                b' vertex.attrib[8].z, c[2], R0;\nMAD.F32 R1, vertex.attrib[7].z, c[2], R1;\nMAD.F32 R2, vertex.attrib[8].w,'
                b' c[3], R0;\nMUL.F32 R3, vertex.attrib[9].y, c[1];\nMUL.F32 R0, vertex.attrib[10].y, c[1];\nMAD.F32 R3, vert'
                b'ex.attrib[9].x, c[0], R3;\nMAD.F32 R0, vertex.attrib[10].x, c[0], R0;\nMAD.F32 R3, vertex.attrib[9].z, c[2'
                b'], R3;\nMAD.F32 R0, vertex.attrib[10].z, c[2], R0;\nMAD.F32 R1, vertex.attrib[7].w, c[3], R1;\nMAD.F32 R3, '
                b'vertex.attrib[9].w, c[3], R3;\nMAD.F32 R4, vertex.attrib[10].w, c[3], R0;\nELSE;\nMOV.F R1, c[0];\nMOV.F R2,'
                b' c[1];\nMOV.F R3, c[2];\nMOV.F R4, c[3];\nENDIF;\nMUL.F32 R0, R6.y, R2;\nMAD.F32 R0, R6.x, R1, R0;\nMAD.F3'
                b'2 R5, R6.z, R3, R0;\nMAD.F32 R8, R6.w, R4, R5;\nLDC.F32X4 R0, buf2[16];\nMUL.F32 R5, R8.y, R0;\nLDC.F32X4 R0'
                b', buf2[0];\nMAD.F32 R5, R8.x, R0, R5;\nLDC.F32X4 R0, buf2[32];\nMAD.F32 R5, R8.z, R0, R5;\nLDC.F32X4 R0, buf'
                b'2[48];\nMAD.F32 R6, R8.w, R0, R5;\nMUL.F32 R0, R2, R7.y;\nMUL.F32 R5.xyz, R9.yzxw, R10.zxyw;\nMAD.F32 R0, R1'
                b', R7.x, R0;\nMAD.F32 R12.xyz, R9.zxyw, R10.yzxw, -R5;\nMAD.F32 R5, R3, R7.z, R0;\nMAD.F32 R11, R4, R7.w, R5'
                b';\nLDC.F32X4 R0, buf2[80];\nMUL.F32 R5, R11.y, R0;\nLDC.F32X4 R0, buf2[64];\nMAD.F32 R7, R11.x, R0, R5;\nLDC.'
                b'F32X4 R5, buf2[96];\nMUL.F32 R0, R2, R12.y;\nMAD.F32 R7, R11.z, R5, R7;\nMAD.F32 R5, R1, R12.x, R0;\nLDC.F32'
                b'X4 R0, buf2[112];\nMOV.F result.attrib[8], R6;\nMAD.F32 result.attrib[9], R11.w, R0, R7;\nMAD.F32 R0, R3, R'
                b'12.z, R5;\nMOV.F result.position, R6;\nADD.F32 result.attrib[6], R0, {0, 0, 0, 0}.x;\nMUL.F32 R0, R2, R10.y'
                b';\nMAD.F32 R0, R1, R10.x, R0;\nMUL.F32 R2, R2, R9.y;\nMAD.F32 R1, R1, R9.x, R2;\nMOV.F result.attrib[0].xyz,'
                b' R8;\nMAD.F32 R0, R3, R10.z, R0;\nMAD.F32 R1, R3, R9.z, R1;\nADD.F32 result.attrib[4], R0, {0, 0, 0, 0}.x;\n'
                b'ADD.F32 result.attrib[5], R1, {0, 0, 0, 0}.x;\nMOV.F result.attrib[2], vertex.attrib[1];\nMOV.F result.att'
                b'rib[7], R4;\nMOV.F result.attrib[1].xyz, R9;\nMUL.F32 result.attrib[3].xy, vertex.attrib[4], c[804];\nEND\n('
                b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xa8\x01\x00\x00!!NVfp5.0\nOPTION NV_internal;\nOPTION NV_bindl'
                b'ess_texture;\nCBUFFER buf0[] = { program.buffer[0] };\nCBUFFER buf1[] = { program.buffer[1] };\nCBUFFER buf'
                b'2[] = { program.buffer[2] };\nCBUFFER buf3[] = { program.buffer[3] };\nCBUFFER buf4[] = { program.buffer[4'
                b'] };\nCBUFFER buf5[] = { program.buffer[5] };\nCBUFFER buf6[] = { program.buffer[6] };\nTEMP T;\nOUTPUT resu'
                b'lt_color0 = result.color;\nMOV.F result_color0, {1, 0, 0, 0}.x;\nEND\n\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
                b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\rtq\x0eb.',
 'binary_format': c_uint(36385),
 'include_files': {'../Fighter/Shaders/PCFKernels.glsl': '2018-11-25 05:37:02.681401',
                   '../Fighter/Shaders/default_material.glsl': '2019-02-05 04:34:40.813699',
                   '../Fighter/Shaders/default_vs.glsl': '2019-02-05 04:36:01.760029',
                   '../Fighter/Shaders/precomputed_atmosphere/atmosphere_predefine.glsl': '2018-11-25 05:37:02.681401',
                   '../Fighter/Shaders/precomputed_atmosphere/definitions.glsl': '2019-01-15 02:55:02.304791',
                   '../Fighter/Shaders/scene_constants.glsl': '2019-01-24 02:58:51.977632',
                   '../Fighter/Shaders/shading.glsl': '2019-02-22 01:19:04.073697',
                   '../Fighter/Shaders/utility.glsl': '2019-01-10 03:25:14.338616'},
 'macros': OrderedDict([('SKELETAL', 1), ('COMBINED_SCATTERING_TEXTURES', 0), ('TRANSPARENT_MATERIAL', 0)]),
 'material_components': [('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal'),
                         ('float', 'brightness'),
                         ('float', 'reflectance'),
                         ('float', 'roughness'),
                         ('float', 'metalicness'),
                         ('float', 'normal_intensity'),
                         ('vec2', 'uv_tiling'),
                         ('vec4', 'emissive_color'),
                         ('vec4', 'diffuse_color'),
                         ('sampler2D', 'texture_diffuse'),
                         ('sampler2D', 'texture_material'),
                         ('sampler2D', 'texture_normal')],
 'shader_codes': {GL_FRAGMENT_SHADER: '#version 430 core\n'
                                      '# extension GL_EXT_texture_array : enable\n'
                                      '#define MATERIAL_COMPONENTS 1\n'
                                      '#define FRAGMENT_SHADER 1\n'
                                      '#define SKELETAL 1\n'
                                      '#define COMBINED_SCATTERING_TEXTURES 0\n'
                                      '#define TRANSPARENT_MATERIAL 0\n'
                                      '#if __VERSION__ >= 130\n'
                                      '#define texture2D texture\n'
                                      '#define texture2DLod textureLod\n'
                                      '#define texture2DGrad textureGrad\n'
                                      '#define texture2DArray texture\n'
                                      '#define texture2DArrayLod textureLod\n'
                                      '#define texture2DArrayGrad textureGrad\n'
                                      '#define texture3D texture\n'
                                      '#define texture3DLod textureLod\n'
                                      '#define texture3DGrad textureGrad\n'
                                      '#define textureCube texture\n'
                                      '#define textureCubeLod textureLod\n'
                                      '#define textureCubeGrad textureGrad\n'
                                      '#endif\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      'layout(std140, binding=0) uniform scene_constants\n'
                                      '{\n'
                                      '    float TIME;\n'
                                      '    float JITTER_FRAME;\n'
                                      '    bool RENDER_SSR;\n'
                                      '    bool RENDER_SSAO;\n'
                                      '    vec2 SCREEN_SIZE;\n'
                                      '    vec2 BACKBUFFER_SIZE;\n'
                                      '    vec2 MOUSE_POS;\n'
                                      '    float DELTA_TIME;\n'
                                      '    int SHADOWMAP_LOOP_COUNT;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=1) uniform view_constants\n'
                                      '{\n'
                                      '    mat4 VIEW;\n'
                                      '    mat4 INV_VIEW;\n'
                                      '    mat4 VIEW_ORIGIN;\n'
                                      '    mat4 INV_VIEW_ORIGIN;\n'
                                      '    mat4 PROJECTION;\n'
                                      '    mat4 INV_PROJECTION;\n'
                                      '    vec3 CAMERA_POSITION;\n'
                                      '    float VIEW_DUMMY_0;\n'
                                      '    vec2 NEAR_FAR;\n'
                                      '    vec2 JITTER_DELTA;\n'
                                      '    vec2 JITTER_OFFSET;\n'
                                      '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=2) uniform view_projection\n'
                                      '{\n'
                                      '    mat4 VIEW_PROJECTION;\n'
                                      '    mat4 PREV_VIEW_PROJECTION;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=3) uniform light_constants\n'
                                      '{\n'
                                      '    vec3 LIGHT_POSITION;\n'
                                      '    float LIGHT_DUMMY_0;\n'
                                      '    vec3 LIGHT_DIRECTION;\n'
                                      '    float LIGHT_DUMMY_1;\n'
                                      '    vec4 LIGHT_COLOR;\n'
                                      '    mat4 SHADOW_MATRIX;\n'
                                      '};\n'
                                      '\n'
                                      'const int MAX_POINT_LIGHTS = 10;\n'
                                      '\n'
                                      'struct POINT_LIGHT\n'
                                      '{\n'
                                      '    vec3 color;\n'
                                      '    float radius;\n'
                                      '    vec3 pos;\n'
                                      '    float render;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=4) uniform point_light_constants\n'
                                      '{\n'
                                      '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'layout(std140, binding=5) uniform particle_common\n'
                                      '{\n'
                                      '    vec3 PARTICLE_COLOR;\n'
                                      '    int PARTICLE_ALIGN_MODE;\n'
                                      '    ivec2 PARTICLE_CELL_COUNT;\n'
                                      '    int PARTICLE_BLEND_MODE;\n'
                                      '    int PARTICLE_COMMON_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      'layout(std140, binding=6) uniform particle_infos\n'
                                      '{\n'
                                      '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                      '    vec2 PARTICLE_DELAY;\n'
                                      '    vec2 PARTICLE_LIFE_TIME;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                      '    float PARTICLE_FADE_IN;\n'
                                      '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                      '    float PARTICLE_FADE_OUT;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                      '    float PARTICLE_OPACITY;\n'
                                      '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                      '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                      '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                      '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                      '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                      '    uint PARTICLE_MAX_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                      '    uint PARTICLE_SPAWN_COUNT;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                      '    float PARTICLE_VELOCITY_STRETCH;\n'
                                      '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                      '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                      '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                      '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                      '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                      '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                      '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                      '    float PARTICLE_FORCE_GRAVITY;\n'
                                      '    float PARTICLE_PLAY_SPEED;\n'
                                      '    uint PARTICLE_VELOCITY_TYPE;\n'
                                      '    float PARTICLE_FORCE_ELASTICITY;\n'
                                      '    float PARTICLE_FORCE_FRICTION;\n'
                                      '    uint PARTICLE_DUMMY_0;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int BLEND = 0;\n'
                                      'const int ADDITIVE = 1;\n'
                                      'const int MULTIPLY = 2;\n'
                                      'const int SUBTRACT = 3;\n'
                                      '\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '\n'
                                      'const int MAX_BONES_PER_VERTEX = 4;\n'
                                      'const int MAX_BONES = 100;\n'
                                      'const float SHADOW_BIAS = -0.0001;\n'
                                      '\n'
                                      'const float PI = 3.14159265358979323846;\n'
                                      'const float HALF_PI = PI * 0.5;\n'
                                      'const float TWO_PI = PI * 2.0;\n'
                                      'const float deg = PI / 180.0;\n'
                                      '\n'
                                      'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                      'const float kSphereRadius = 1.0;\n'
                                      'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                      'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                      '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                      '#define UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                      '\n'
                                      'const int FilterTypes_Box = 0;\n'
                                      'const int FilterTypes_Triangle = 1;\n'
                                      'const int FilterTypes_Gaussian = 2;\n'
                                      'const int FilterTypes_BlackmanHarris = 3;\n'
                                      'const int FilterTypes_Smoothstep = 4;\n'
                                      'const int FilterTypes_BSpline = 5;\n'
                                      'const int FilterTypes_CatmullRom = 6;\n'
                                      'const int FilterTypes_Mitchell = 7;\n'
                                      'const int FilterTypes_GeneralizedCubic = 8;\n'
                                      'const int FilterTypes_Sinc = 9;\n'
                                      '\n'
                                      '\n'
                                      'float FilterBox(in float x)\n'
                                      '{\n'
                                      '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterTriangle(in float x)\n'
                                      '{\n'
                                      '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterGaussian(in float x)\n'
                                      '{\n'
                                      '    const float sigma = 0.25;\n'
                                      '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                      '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                      '}\n'
                                      '\n'
                                      'float FilterCubic(in float x, in float B, in float C)\n'
                                      '{\n'
                                      '    float y = 0.0f;\n'
                                      '    float x2 = x * x;\n'
                                      '    float x3 = x * x * x;\n'
                                      '\n'
                                      '    if(x < 1)\n'
                                      '    {\n'
                                      '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                      '    }\n'
                                      '    else if(x <= 2)\n'
                                      '    {\n'
                                      '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B '
                                      '+ 24 * C);\n'
                                      '    }\n'
                                      '\n'
                                      '    return y / 6.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSinc(in float x, in float filterRadius)\n'
                                      '{\n'
                                      '    float s;\n'
                                      '    x *= filterRadius * 2.0f;\n'
                                      '    if(x < 0.001f)\n'
                                      '        s = 1.0f;\n'
                                      '    else\n'
                                      '        s = sin(x * PI) / (x * PI);\n'
                                      '    return s;\n'
                                      '}\n'
                                      '\n'
                                      'float FilterBlackmanHarris(in float x)\n'
                                      '{\n'
                                      '    x = 1.0f - x;\n'
                                      '    const float a0 = 0.35875f;\n'
                                      '    const float a1 = 0.48829f;\n'
                                      '    const float a2 = 0.14128f;\n'
                                      '    const float a3 = 0.01168f;\n'
                                      '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                      '0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float FilterSmoothstep(in float x)\n'
                                      '{\n'
                                      '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                      '}\n'
                                      '\n'
                                      'float Filter(in float x, in int filterType, in float filterRadius, in bool '
                                      'rescaleCubic)\n'
                                      '{\n'
                                      '    \n'
                                      '    \n'
                                      '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                      '\n'
                                      '    if(filterType == FilterTypes_Box)\n'
                                      '        return FilterBox(x);\n'
                                      '    else if(filterType == FilterTypes_Triangle)\n'
                                      '        return FilterTriangle(x);\n'
                                      '    else if(filterType == FilterTypes_Gaussian)\n'
                                      '        return FilterGaussian(x);\n'
                                      '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                      '        return FilterBlackmanHarris(x);\n'
                                      '    else if(filterType == FilterTypes_Smoothstep)\n'
                                      '        return FilterSmoothstep(x);\n'
                                      '    else if(filterType == FilterTypes_BSpline)\n'
                                      '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                      '    else if(filterType == FilterTypes_CatmullRom)\n'
                                      '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                      '    else if(filterType == FilterTypes_Mitchell)\n'
                                      '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                      '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                      '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                      '    else if(filterType == FilterTypes_Sinc)\n'
                                      '        return FilterSinc(x, filterRadius);\n'
                                      '    else\n'
                                      '        return 1.0f;\n'
                                      '}\n'
                                      '\n'
                                      'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                      'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                      '\n'
                                      'float get_luminance(vec3 color)\n'
                                      '{\n'
                                      '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float depth_to_linear_depth(float depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    depth = depth * 2.0 - 1.0;\n'
                                      '    \n'
                                      '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float linear_depth_to_depth(float linear_depth)\n'
                                      '{\n'
                                      '    const float zNear = NEAR_FAR.x;\n'
                                      '    const float zFar = NEAR_FAR.y;\n'
                                      '    \n'
                                      '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    \n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                      '{\n'
                                      '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                      '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                      '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                      '    return depth * 0.5 + 0.5;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                      '{\n'
                                      '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                      '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                      '    relative_pos /= relative_pos.w;\n'
                                      '    return relative_pos;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    float depth = linear_depth_to_depth(linear_depth);\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return depth_to_relative_world(tex_coord, depth);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'float PseudoRandom(vec2 xy)\n'
                                      '{\n'
                                      '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                      '\n'
                                      '    \n'
                                      '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                      '}\n'
                                      '\n'
                                      'float rand(vec2 co){\n'
                                      '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand3(vec3 uvw, float scale)\n'
                                      '{\n'
                                      '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      'float rand4(vec4 seed4){\n'
                                      '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                      '43758.5453123);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 generate_random(float random_seed)\n'
                                      '{\n'
                                      '    vec4 random_factor;\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_seed));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '    return random_factor;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random1(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.w = random_factor.x;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random2(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.w = random_factor.y;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random3(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = random_factor.z;\n'
                                      '}\n'
                                      '\n'
                                      'void generate_random4(inout vec4 random_factor)\n'
                                      '{\n'
                                      '    float time = fract(TIME * 0.001);\n'
                                      '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                      '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                      '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                      '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 invert_y(vec3 vector)\n'
                                      '{\n'
                                      '    return vec3(vector.x, -vector.y, vector.z);\n'
                                      '}\n'
                                      '\n'
                                      'float safe_atan(float y, float x)\n'
                                      '{\n'
                                      '    return mod(atan(y, x), TWO_PI);\n'
                                      '}\n'
                                      '\n'
                                      'vec2 safe_normalize(vec2 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 safe_normalize(vec3 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '\n'
                                      'vec4 safe_normalize(vec4 vector)\n'
                                      '{\n'
                                      '    float dist = length(vector);\n'
                                      '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                      '}\n'
                                      '#endif /* UUID_c11f48f5_9502_346c_b8aa_1938654b93b2 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "shading.glsl"\n'
                                      '#ifndef UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d\n'
                                      '#define UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "PCFKernels.glsl"\n'
                                      '#ifndef UUID_26267165_d58b_328e_9ecb_56aeb0edfdce\n'
                                      '#define UUID_26267165_d58b_328e_9ecb_56aeb0edfdce\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'const int PoissonSampleCount = 64;\n'
                                      '\n'
                                      '\n'
                                      'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                      '{\n'
                                      '    vec2(-0.5119625f, -0.4827938f),\n'
                                      '    vec2(-0.2171264f, -0.4768726f),\n'
                                      '    vec2(-0.7552931f, -0.2426507f),\n'
                                      '    vec2(-0.7136765f, -0.4496614f),\n'
                                      '    vec2(-0.5938849f, -0.6895654f),\n'
                                      '    vec2(-0.3148003f, -0.7047654f),\n'
                                      '    vec2(-0.42215f, -0.2024607f),\n'
                                      '    vec2(-0.9466816f, -0.2014508f),\n'
                                      '    vec2(-0.8409063f, -0.03465778f),\n'
                                      '    vec2(-0.6517572f, -0.07476326f),\n'
                                      '    vec2(-0.1041822f, -0.02521214f),\n'
                                      '    vec2(-0.3042712f, -0.02195431f),\n'
                                      '    vec2(-0.5082307f, 0.1079806f),\n'
                                      '    vec2(-0.08429877f, -0.2316298f),\n'
                                      '    vec2(-0.9879128f, 0.1113683f),\n'
                                      '    vec2(-0.3859636f, 0.3363545f),\n'
                                      '    vec2(-0.1925334f, 0.1787288f),\n'
                                      '    vec2(0.003256182f, 0.138135f),\n'
                                      '    vec2(-0.8706837f, 0.3010679f),\n'
                                      '    vec2(-0.6982038f, 0.1904326f),\n'
                                      '    vec2(0.1975043f, 0.2221317f),\n'
                                      '    vec2(0.1507788f, 0.4204168f),\n'
                                      '    vec2(0.3514056f, 0.09865579f),\n'
                                      '    vec2(0.1558783f, -0.08460935f),\n'
                                      '    vec2(-0.0684978f, 0.4461993f),\n'
                                      '    vec2(0.3780522f, 0.3478679f),\n'
                                      '    vec2(0.3956799f, -0.1469177f),\n'
                                      '    vec2(0.5838975f, 0.1054943f),\n'
                                      '    vec2(0.6155105f, 0.3245716f),\n'
                                      '    vec2(0.3928624f, -0.4417621f),\n'
                                      '    vec2(0.1749884f, -0.4202175f),\n'
                                      '    vec2(0.6813727f, -0.2424808f),\n'
                                      '    vec2(-0.6707711f, 0.4912741f),\n'
                                      '    vec2(0.0005130528f, -0.8058334f),\n'
                                      '    vec2(0.02703013f, -0.6010728f),\n'
                                      '    vec2(-0.1658188f, -0.9695674f),\n'
                                      '    vec2(0.4060591f, -0.7100726f),\n'
                                      '    vec2(0.7713396f, -0.4713659f),\n'
                                      '    vec2(0.573212f, -0.51544f),\n'
                                      '    vec2(-0.3448896f, -0.9046497f),\n'
                                      '    vec2(0.1268544f, -0.9874692f),\n'
                                      '    vec2(0.7418533f, -0.6667366f),\n'
                                      '    vec2(0.3492522f, 0.5924662f),\n'
                                      '    vec2(0.5679897f, 0.5343465f),\n'
                                      '    vec2(0.5663417f, 0.7708698f),\n'
                                      '    vec2(0.7375497f, 0.6691415f),\n'
                                      '    vec2(0.2271994f, -0.6163502f),\n'
                                      '    vec2(0.2312844f, 0.8725659f),\n'
                                      '    vec2(0.4216993f, 0.9002838f),\n'
                                      '    vec2(0.4262091f, -0.9013284f),\n'
                                      '    vec2(0.2001408f, -0.808381f),\n'
                                      '    vec2(0.149394f, 0.6650763f),\n'
                                      '    vec2(-0.09640376f, 0.9843736f),\n'
                                      '    vec2(0.7682328f, -0.07273844f),\n'
                                      '    vec2(0.04146584f, 0.8313184f),\n'
                                      '    vec2(0.9705266f, -0.1143304f),\n'
                                      '    vec2(0.9670017f, 0.1293385f),\n'
                                      '    vec2(0.9015037f, -0.3306949f),\n'
                                      '    vec2(-0.5085648f, 0.7534177f),\n'
                                      '    vec2(0.9055501f, 0.3758393f),\n'
                                      '    vec2(0.7599946f, 0.1809109f),\n'
                                      '    vec2(-0.2483695f, 0.7942952f),\n'
                                      '    vec2(-0.4241052f, 0.5581087f),\n'
                                      '    vec2(-0.1020106f, 0.6724468f),\n'
                                      '};\n'
                                      '#endif /* UUID_26267165_d58b_328e_9ecb_56aeb0edfdce */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "utility.glsl"\n'
                                      '#ifndef UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                      '#define UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                      '#endif /* UUID_c11f48f5_9502_346c_b8aa_1938654b93b2 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                      '#ifndef UUID_7930fe11_5b93_388d_b01e_c1ba150d8083\n'
                                      '#define UUID_7930fe11_5b93_388d_b01e_c1ba150d8083\n'
                                      'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                      'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                      'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                      'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                      'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                      'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                      'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                      'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                      '#ifndef UUID_cd06d49e_87b7_359c_aed9_48f39d158c76\n'
                                      '#define UUID_cd06d49e_87b7_359c_aed9_48f39d158c76\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 earth_center;\n'
                                      'uniform vec2 sun_size;\n'
                                      'uniform float atmosphere_exposure;\n'
                                      'uniform bool render_light_probe_mode;\n'
                                      '\n'
                                      'uniform sampler2D transmittance_texture;\n'
                                      'uniform sampler2D irradiance_texture;\n'
                                      'uniform sampler3D scattering_texture;\n'
                                      'uniform sampler3D single_mie_scattering_texture;\n'
                                      'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                      'uniform sampler3D scattering_density_texture;\n'
                                      'uniform sampler3D multiple_scattering_texture;\n'
                                      '\n'
                                      '\n'
                                      'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                      'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '\n'
                                      'const float atmosphere_ratio = 0.1;\n'
                                      '\n'
                                      'struct DensityProfileLayer\n'
                                      '{\n'
                                      '    float width;\n'
                                      '    float exp_term;\n'
                                      '    float exp_scale;\n'
                                      '    float linear_term;\n'
                                      '    float constant_term;\n'
                                      '};\n'
                                      '\n'
                                      'struct DensityProfile\n'
                                      '{\n'
                                      '    DensityProfileLayer layers[2];\n'
                                      '};\n'
                                      '\n'
                                      'struct AtmosphereParameters\n'
                                      '{\n'
                                      '    vec3 solar_irradiance;\n'
                                      '    float sun_angular_radius;\n'
                                      '    float bottom_radius;\n'
                                      '    float top_radius;\n'
                                      '    DensityProfile rayleigh_density;\n'
                                      '    vec3 rayleigh_scattering;\n'
                                      '    DensityProfile mie_density;\n'
                                      '    vec3 mie_scattering;\n'
                                      '    vec3 mie_extinction;\n'
                                      '    float mie_phase_function_g;\n'
                                      '    DensityProfile absorption_density;\n'
                                      '    vec3 absorption_extinction;\n'
                                      '    vec3 ground_albedo;\n'
                                      '    float mu_s_min;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      'float ClampCosine(float mu)\n'
                                      '{\n'
                                      '    return clamp(mu, -1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampDistance(float d)\n'
                                      '{\n'
                                      '    return max(d, 0.0);\n'
                                      '}\n'
                                      '\n'
                                      'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                      '{\n'
                                      '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                      '}\n'
                                      '\n'
                                      'float SafeSqrt(float a)\n'
                                      '{\n'
                                      '    return sqrt(max(a, 0.0));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                      'atmosphere.top_radius;\n'
                                      '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, '
                                      'float r, float mu)\n'
                                      '{\n'
                                      '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                      '}\n'
                                      '\n'
                                      'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                      '{\n'
                                      '    if(mu < 0.0)\n'
                                      '    {\n'
                                      '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '        if(0.0 <= result)\n'
                                      '        {\n'
                                      '            return true;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return false;\n'
                                      '}\n'
                                      '\n'
                                      'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                      '{\n'
                                      '    float density =\n'
                                      '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude '
                                      '+ layer.constant_term;\n'
                                      '    return clamp(density, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                      '{\n'
                                      '    return altitude < profile.layers[0].width ?\n'
                                      '        GetLayerDensity(profile.layers[0], altitude) : '
                                      'GetLayerDensity(profile.layers[1], altitude);\n'
                                      '}\n'
                                      '\n'
                                      'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in DensityProfile profile,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 500;\n'
                                      '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / '
                                      'float(SAMPLE_COUNT);\n'
                                      '    float result = 0.0;\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                      '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        result += y_i * weight_i * dx;\n'
                                      '    }\n'
                                      '    return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu)\n'
                                      '{\n'
                                      '    return exp(-(\n'
                                      '        atmosphere.rayleigh_scattering *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.rayleigh_density, r, mu) +\n'
                                      '        atmosphere.mie_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.mie_density, r, mu) +\n'
                                      '        atmosphere.absorption_extinction *\n'
                                      '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                      'atmosphere.absorption_density, r, mu)));\n'
                                      '}\n'
                                      '\n'
                                      'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                      '{\n'
                                      '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                      '{\n'
                                      '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                      '}\n'
                                      '\n'
                                      'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float '
                                      'r, float mu)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                      '    float x_r = rho / H;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                      '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu)\n'
                                      '{\n'
                                      '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                      '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '\n'
                                      '    float rho = H * x_r;\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float d_min = atmosphere.top_radius - r;\n'
                                      '    float d_max = rho + H;\n'
                                      '    float d = d_min + x_mu * (d_max - d_min);\n'
                                      '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                      '    mu = ClampCosine(mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                      'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                      'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                      '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r, float mu)\n'
                                      '{\n'
                                      '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                      '    return vec3(texture2D(transmittance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, -mu_d) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, -mu),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        return min(\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu) /\n'
                                      '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r_d, mu_d),\n'
                                      '            vec3(1.0));\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetTransmittanceToSun(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                      '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                      '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                      'r, mu_s) *\n'
                                      '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                      '                 mu_s - cos_theta_h);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringIntegrand(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    float d,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                      '    vec3 transmittance =\n'
                                      '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground) *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                      '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                      'atmosphere.bottom_radius);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float DistanceToNearestAtmosphereBoundary(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '    }\n'
                                      '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 rayleigh,\n'
                                      '    out vec3 mie)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 rayleigh_sum = vec3(0.0);\n'
                                      '    vec3 mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        vec3 rayleigh_i;\n'
                                      '        vec3 mie_i;\n'
                                      '        ComputeSingleScatteringIntegrand(\n'
                                      '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                      'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                      '        mie_sum += mie_i * weight_i;\n'
                                      '    }\n'
                                      '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                      'atmosphere.rayleigh_scattering;\n'
                                      '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float RayleighPhaseFunction(float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (16.0 * PI);\n'
                                      '    return k * (1.0 + nu * nu);\n'
                                      '}\n'
                                      '\n'
                                      'float MiePhaseFunction(float g, float nu)\n'
                                      '{\n'
                                      '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                      '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float r,\n'
                                      '    float mu,\n'
                                      '    float mu_s,\n'
                                      '    float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float r_mu = r * mu;\n'
                                      '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                      'atmosphere.bottom_radius;\n'
                                      '    float u_mu;\n'
                                      '    if (ray_r_mu_intersects_ground)\n'
                                      '    {\n'
                                      '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                      'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                      '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                      '    }\n'
                                      '\n'
                                      '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                      'mu_s);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float a = (d - d_min) / (d_max - d_min);\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                      'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float u_nu = (nu + 1.0) / 2.0;\n'
                                      '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec4 uvwz,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                      'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                      '    if (uvwz.z < 0.5)\n'
                                      '    {\n'
                                      '        float d_min = r - atmosphere.bottom_radius;\n'
                                      '        float d_max = rho;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                      '        ray_r_mu_intersects_ground = true;\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d_min = atmosphere.top_radius - r;\n'
                                      '        float d_max = rho + H;\n'
                                      '        float d = d_min + (d_max - d_min) *\n'
                                      '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE '
                                      '/ 2);\n'
                                      '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                      'd));\n'
                                      '        ray_r_mu_intersects_ground = false;\n'
                                      '    }\n'
                                      '\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                      '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                      '    float d_max = H;\n'
                                      '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                      '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                      '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                      '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                      'atmosphere.bottom_radius * d));\n'
                                      '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out float r,\n'
                                      '    out float mu,\n'
                                      '    out float mu_s,\n'
                                      '    out float nu,\n'
                                      '    out bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                      '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                      '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                      '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                      '        SCATTERING_TEXTURE_R_SIZE);\n'
                                      '    float frag_coord_nu = floor(gl_frag_coord.x / '
                                      'float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                      '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) '
                                      '/ SCATTERING_TEXTURE_SIZE;\n'
                                      '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    nu = clamp(\n'
                                      '        nu,\n'
                                      '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                      '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void ComputeSingleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec3 gl_frag_coord,\n'
                                      '    out vec3 rayleigh, out vec3 mie)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                      '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '    return vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    if (scattering_order == 1)\n'
                                      '    {\n'
                                      '        vec3 rayleigh = GetScattering(\n'
                                      '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '        vec3 mie = GetScattering(\n'
                                      '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                      '            ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                      'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '    }\n'
                                      '\n'
                                      '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu_s);\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensity(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                      '{\n'
                                      '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                      '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                      '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                      '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                      '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                      '\n'
                                      '    const int SAMPLE_COUNT = 16;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie = vec3(0.0);\n'
                                      '\n'
                                      '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                      '    {\n'
                                      '        float theta = (float(l) + 0.5) * dtheta;\n'
                                      '        float cos_theta = cos(theta);\n'
                                      '        float sin_theta = sin(theta);\n'
                                      '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                      'cos_theta);\n'
                                      '\n'
                                      '        float distance_to_ground = 0.0;\n'
                                      '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                      '        vec3 ground_albedo = vec3(0.0);\n'
                                      '        if (ray_r_theta_intersects_ground)\n'
                                      '        {\n'
                                      '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                      'cos_theta);\n'
                                      '            transmittance_to_ground = GetTransmittance(atmosphere, '
                                      'transmittance_texture, r, cos_theta, distance_to_ground, true );\n'
                                      '            ground_albedo = atmosphere.ground_albedo;\n'
                                      '        }\n'
                                      '\n'
                                      '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                      '        {\n'
                                      '            float phi = 1.5 * dphi;\n'
                                      '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, '
                                      'cos_theta);\n'
                                      '            float domega_i = dtheta * dphi * sin(theta);\n'
                                      '\n'
                                      '            float nu1 = dot(omega_s, omega_i);\n'
                                      '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                      '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                      '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                      '\n'
                                      '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                      'distance_to_ground);\n'
                                      '            vec3 ground_irradiance = GetIrradiance(\n'
                                      '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                      '                dot(ground_normal, omega_s));\n'
                                      '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) '
                                      '* ground_irradiance;\n'
                                      '\n'
                                      '            float nu2 = dot(omega, omega_i);\n'
                                      '            float rayleigh_density = GetProfileDensity(\n'
                                      '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                      '            float mie_density = GetProfileDensity(\n'
                                      '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                      '            rayleigh_mie += incident_radiance *\n'
                                      '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                      'RayleighPhaseFunction(nu2) +\n'
                                      '                atmosphere.mie_scattering * mie_density *\n'
                                      '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                      '        }\n'
                                      '    }\n'
                                      '    return rayleigh_mie;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 50;\n'
                                      '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                      'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                      '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                      '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                      '    {\n'
                                      '        float d_i = float(i) * dx;\n'
                                      '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                      'r));\n'
                                      '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                      '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                      '        vec3 rayleigh_mie_i =\n'
                                      '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, '
                                      'nu, ray_r_mu_intersects_ground) *\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                      'ray_r_mu_intersects_ground) * dx;\n'
                                      '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                      '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                      '    }\n'
                                      '    return rayleigh_mie_sum;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeScatteringDensitytexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    float nu;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                      '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                      '        scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeMultipleScatteringtexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_density_texture,\n'
                                      '    const in vec3 gl_frag_coord, out float nu)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu;\n'
                                      '    float mu_s;\n'
                                      '    bool ray_r_mu_intersects_ground;\n'
                                      '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, '
                                      'nu, ray_r_mu_intersects_ground);\n'
                                      '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                      '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                      '        ray_r_mu_intersects_ground);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                      '    float average_cosine_factor = 0.0;\n'
                                      '    if(-alpha_s <= mu_s)\n'
                                      '    {\n'
                                      '        if(mu_s <= alpha_s)\n'
                                      '        {\n'
                                      '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                      'alpha_s);\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            average_cosine_factor = mu_s;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                      'mu_s) * average_cosine_factor;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s,\n'
                                      '    int scattering_order)\n'
                                      '{\n'
                                      '    const int SAMPLE_COUNT = 32;\n'
                                      '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                      '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0);\n'
                                      '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                      '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                      '    {\n'
                                      '        float theta = (float(j) + 0.5) * dtheta;\n'
                                      '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                      '        {\n'
                                      '            float phi = (float(i) + 0.5) * dphi;\n'
                                      '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), '
                                      'cos(theta));\n'
                                      '            float domega = dtheta * dphi * sin(theta);\n'
                                      '            float nu = dot(omega, omega_s);\n'
                                      '            result += GetScattering(\n'
                                      '                atmosphere,\n'
                                      '                single_rayleigh_scattering_texture,\n'
                                      '                single_mie_scattering_texture,\n'
                                      '                multiple_scattering_texture,\n'
                                      '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                      '        }\n'
                                      '    }\n'
                                      '  return result;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                      'float mu_s)\n'
                                      '{\n'
                                      '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                      '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                      '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                      '    const in vec2 uv, out float r, out float mu_s)\n'
                                      '{\n'
                                      '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                      '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                      '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                      'atmosphere.bottom_radius);\n'
                                      '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeDirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in vec2 gl_frag_coord)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    const in sampler3D multiple_scattering_texture,\n'
                                      '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                      '{\n'
                                      '    float r;\n'
                                      '    float mu_s;\n'
                                      '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                      'r, mu_s);\n'
                                      '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                      'single_mie_scattering_texture,\n'
                                      '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    float r,\n'
                                      '    float mu_s)\n'
                                      '{\n'
                                      '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                      '    return vec3(texture2D(irradiance_texture, uv));\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetCombinedScattering(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    float r, float mu, float mu_s, float nu,\n'
                                      '    bool ray_r_mu_intersects_ground,\n'
                                      '    out vec3 single_mie_scattering)\n'
                                      '{\n'
                                      '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                      '    float tex_x = floor(tex_coord_x);\n'
                                      '    float lerp = tex_coord_x - tex_x;\n'
                                      '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                      'uvwz.w);\n'
                                      '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), '
                                      'uvwz.z, uvwz.w);\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#else\n'
                                      '    vec3 scattering = vec3(\n'
                                      '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                      'texture3D(scattering_texture, uvw1) * lerp);\n'
                                      '    single_mie_scattering = vec3(\n'
                                      '        texture3D(single_mie_scattering_texture, uvw0) * (1.0 - lerp) +\n'
                                      '        texture3D(single_mie_scattering_texture, uvw1) * lerp);\n'
                                      '#endif\n'
                                      '    return scattering;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                      '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '    else if(r > atmosphere.top_radius)\n'
                                      '    {\n'
                                      '        transmittance = vec3(1.0);\n'
                                      '        return vec3(0.0);\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = ray_r_mu_intersects_ground ?\n'
                                      '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                      'transmittance_texture, r, mu);\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering;\n'
                                      '    if (shadow_length == 0.0)\n'
                                      '    {\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        float d = shadow_length;\n'
                                      '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '        float mu_p = (r * mu + d) / r_p;\n'
                                      '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '        scattering = GetCombinedScattering(\n'
                                      '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                      '        vec3 shadow_transmittance =\n'
                                      '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '        scattering = scattering * shadow_transmittance;\n'
                                      '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                      '    }\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 ComputeSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler3D scattering_texture,\n'
                                      '    const in sampler3D single_mie_scattering_texture,\n'
                                      '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                      '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    vec3 view_ray = normalize(point - camera);\n'
                                      '    float r = length(camera);\n'
                                      '    float rmu = dot(camera, view_ray);\n'
                                      '    float distance_to_top_atmosphere_boundary =\n'
                                      '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * '
                                      'atmosphere.top_radius);\n'
                                      '\n'
                                      '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                      '    {\n'
                                      '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                      '        r = atmosphere.top_radius;\n'
                                      '        rmu += distance_to_top_atmosphere_boundary;\n'
                                      '    }\n'
                                      '\n'
                                      '    float mu = rmu / r;\n'
                                      '    float mu_s = dot(camera, sun_direction) / r;\n'
                                      '    float nu = dot(view_ray, sun_direction);\n'
                                      '    float d = length(point - camera);\n'
                                      '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                      '\n'
                                      '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                      'ray_r_mu_intersects_ground);\n'
                                      '\n'
                                      '    vec3 single_mie_scattering;\n'
                                      '    vec3 scattering = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering);\n'
                                      '\n'
                                      '    d = max(d - shadow_length, 0.0);\n'
                                      '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                      '    float mu_p = (r * mu + d) / r_p;\n'
                                      '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                      '\n'
                                      '    vec3 single_mie_scattering_p;\n'
                                      '    vec3 scattering_p = GetCombinedScattering(\n'
                                      '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                      '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                      '        single_mie_scattering_p);\n'
                                      '\n'
                                      '    vec3 shadow_transmittance = transmittance;\n'
                                      '    if (shadow_length > 0.0)\n'
                                      '    {\n'
                                      '        shadow_transmittance = GetTransmittance(\n'
                                      '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                      '    }\n'
                                      '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                      '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                      'single_mie_scattering_p;\n'
                                      '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), '
                                      'mu_s);\n'
                                      '\n'
                                      '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                      '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 ComputeSunAndSkyIrradiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    const in sampler2D transmittance_texture,\n'
                                      '    const in sampler2D irradiance_texture,\n'
                                      '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                      '    out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    float r = length(point);\n'
                                      '    float mu_s = dot(point, sun_direction) / r;\n'
                                      '\n'
                                      '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                      'dot(normal, point) / r) * 0.5;\n'
                                      '\n'
                                      '    return atmosphere.solar_irradiance *\n'
                                      '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                      '        max(dot(normal, sun_direction), 0.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                      '{\n'
                                      '    return atmosphere.solar_irradiance /\n'
                                      '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                      'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSkyRadianceToPoint(\n'
                                      '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                      'shadow_length,\n'
                                      '    vec3 sun_direction, out vec3 transmittance)\n'
                                      '{\n'
                                      '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                      '        scattering_texture, single_mie_scattering_texture,\n'
                                      '        camera, point, shadow_length, sun_direction, transmittance) * '
                                      'SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 GetSunAndSkyIrradiance(\n'
                                      '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                      '   out vec3 sky_irradiance)\n'
                                      '{\n'
                                      '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                      '        atmosphere, transmittance_texture, irradiance_texture, p, normal, '
                                      'sun_direction, sky_irradiance);\n'
                                      '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                      '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                      '{\n'
                                      '    vec3 p = point - kSphereCenter;\n'
                                      '    float p_dot_v = dot(p, sun_direction);\n'
                                      '    float p_dot_p = dot(p, p);\n'
                                      '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                      '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                      '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                      '    if (distance_to_intersection > 0.0)\n'
                                      '    {\n'
                                      '        float ray_sphere_distance = kSphereRadius - '
                                      'sqrt(ray_sphere_center_squared_distance);\n'
                                      '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                      '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                      '    }\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float GetSkyVisibility(vec3 point)\n'
                                      '{\n'
                                      '  vec3 p = point - kSphereCenter;\n'
                                      '  float p_dot_p = dot(p, p);\n'
                                      '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                      '}\n'
                                      '\n'
                                      'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                      'float d_out)\n'
                                      '{\n'
                                      '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                      '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                      '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                      '    float k = sun_size.x;\n'
                                      '    float l = 1.0 + k * k;\n'
                                      '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                      '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                      'kSphereRadius * view_dot_sun;\n'
                                      '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                      '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                      '    float discriminant = b * b - a * c;\n'
                                      '    if (discriminant > 0.0)\n'
                                      '    {\n'
                                      '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                      '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                      '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                      '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                      '        if (view_dot_sun > 0.0)\n'
                                      '        {\n'
                                      '            d_in = max(d_in, d_apex);\n'
                                      '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                      '            d_out = min(d_out, d_apex);\n'
                                      '        }\n'
                                      '    }\n'
                                      '    else\n'
                                      '    {\n'
                                      '        d_in = 0.0;\n'
                                      '        d_out = 0.0;\n'
                                      '    }\n'
                                      '}\n'
                                      '\n'
                                      'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    const float earth_radius = abs(earth_center.y);\n'
                                      '    bool shadow_enter = false;\n'
                                      '    bool do_exit = false;\n'
                                      '    float scene_shadow_out = 0.0;\n'
                                      '    float scene_shadow_in = 0.0;\n'
                                      '    float shadow_length = 0.0;\n'
                                      '    const int LOOP = 64;\n'
                                      '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                      '    float enter_count = 0.0;\n'
                                      '\n'
                                      '    for(int i=0; i<LOOP; ++i)\n'
                                      '    {\n'
                                      '        float ray_dist = float(i) * d;\n'
                                      '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                      '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                      '        shadow_uv.xyz /= shadow_uv.w;\n'
                                      '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                      '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                      '\n'
                                      '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                      'shadow_uv.y || scene_dist <= ray_dist)\n'
                                      '        {\n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                      '        {\n'
                                      '            \n'
                                      '            do_exit = true;\n'
                                      '        }\n'
                                      '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                      '        {\n'
                                      '            \n'
                                      '            shadow_enter = true;\n'
                                      '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                      '        }\n'
                                      '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                      '        {\n'
                                      '            \n'
                                      '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '\n'
                                      '            \n'
                                      '            shadow_enter = false;\n'
                                      '            scene_shadow_in = 0.0;\n'
                                      '            scene_shadow_out = 0.0;\n'
                                      '            continue;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(shadow_enter)\n'
                                      '        {\n'
                                      '            enter_count += 1.0;\n'
                                      '        }\n'
                                      '\n'
                                      '        if(do_exit || i == (LOOP-1))\n'
                                      '        {\n'
                                      '            if(shadow_enter)\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                      '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                \n'
                                      '                scene_shadow_in = 0.0;\n'
                                      '                scene_shadow_out = 0.0;\n'
                                      '            }\n'
                                      '            break;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_length = enter_count / float(LOOP);\n'
                                      '\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                      'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                      '\n'
                                      '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    \n'
                                      '    float scene_shadow_length = 0.0;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetSceneRadianceWithShadow(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D '
                                      'texture_shadow,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                      'scene_shadow_length)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    \n'
                                      '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                      '    relative_point.y = max(0.0, relative_point.y);\n'
                                      '\n'
                                      '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                      'texture_shadow);\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                      '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                      'transmittance);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'void GetCloudRadiance(\n'
                                      '    const in AtmosphereParameters atmosphere,\n'
                                      '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                      '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                      '{\n'
                                      '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                      '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                      '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                      'atmosphere_ratio;\n'
                                      '\n'
                                      '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                      '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                      'sky_irradiance);\n'
                                      '\n'
                                      '    vec3 transmittance;\n'
                                      '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                      '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                      '\n'
                                      '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                      '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                      '    transmittance = max(vec3(0.0), transmittance);\n'
                                      '    inscatter = max(vec3(0.0), inscatter);\n'
                                      '\n'
                                      '    sun_irradiance *= transmittance / PI;\n'
                                      '    sky_irradiance *= transmittance / PI;\n'
                                      '}\n'
                                      '#endif /* UUID_cd06d49e_87b7_359c_aed9_48f39d158c76 */\n'
                                      '\n'
                                      'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                      'vec3(1.474000, 1.850400, 1.911980),\n'
                                      '0.004675,\n'
                                      '6361.0,\n'
                                      '6420.0,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.005802, 0.013558, 0.033100),\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                      '0.000000))),\n'
                                      'vec3(0.003996, 0.003996, 0.003996),\n'
                                      'vec3(0.004440, 0.004440, 0.004440),\n'
                                      '0.8,\n'
                                      'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, '
                                      '0.000000, 0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                      '-0.066667, 2.666667))),\n'
                                      'vec3(0.000650, 0.001881, 0.000085),\n'
                                      'vec3(0.100000, 0.100000, 0.100000),\n'
                                      '-0.4999999690599179);\n'
                                      '#endif /* UUID_7930fe11_5b93_388d_b01e_c1ba150d8083 */\n'
                                      '\n'
                                      '\n'
                                      'float get_shadow_factor_simple(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                      '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                      '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                      '    shadow_proj.xyz /= shadow_proj.w;\n'
                                      '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                      '    float shadow_depth = shadow_proj.z;\n'
                                      '    vec2 offsets[4] = {\n'
                                      '        vec2(0.0, 0.0),\n'
                                      '        vec2(shadow_texel_size.x, 0.0),\n'
                                      '        vec2(0.0, shadow_texel_size.y),\n'
                                      '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                      '    };\n'
                                      '\n'
                                      '    float shadow_factor = 0.0;\n'
                                      '    const float c = 1000.0;\n'
                                      '    float depth_bias = 0.002;\n'
                                      '\n'
                                      '    vec2 shadow_uv = shadow_proj.xy;\n'
                                      '\n'
                                      '    vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                      '    vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                      '    vec2 uv = pixel_pos * shadow_texel_size;\n'
                                      '\n'
                                      '    vec4 shadow_factors;\n'
                                      '\n'
                                      '    for(int i=0; i<4; ++i)\n'
                                      '    {\n'
                                      '        vec2 shadow_uv = uv + offsets[i];\n'
                                      '        shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                      '        if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                      'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                      '        {\n'
                                      '            shadow_factors[i] = saturate(exp( -c * (shadow_depth - shadow_factors[i] + '
                                      'depth_bias)));\n'
                                      '        }\n'
                                      '        else\n'
                                      '        {\n'
                                      '            shadow_factors[i] = 1.0;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    shadow_factor += mix(\n'
                                      '        mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                      '        mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                      '\n'
                                      '    return clamp(shadow_factor, 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                      'texture_shadow)\n'
                                      '{\n'
                                      '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                      '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                      '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                      '    shadow_proj.xyz /= shadow_proj.w;\n'
                                      '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                      '    float shadow_depth = shadow_proj.z;\n'
                                      '    vec2 offsets[4] = {\n'
                                      '        vec2(0.0, 0.0),\n'
                                      '        vec2(shadow_texel_size.x, 0.0),\n'
                                      '        vec2(0.0, shadow_texel_size.y),\n'
                                      '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                      '    };\n'
                                      '\n'
                                      '    float shadow_factor = 0.0;\n'
                                      '    const float c = 1000.0;\n'
                                      '    float depth_bias = 0.002;\n'
                                      '\n'
                                      '    for(int n=0; n<SHADOWMAP_LOOP_COUNT; ++n)\n'
                                      '    {\n'
                                      '        vec2 shadow_uv = shadow_proj.xy + PoissonSamples[n] * shadow_texel_size * 4.0;\n'
                                      '\n'
                                      '        vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                      '        vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                      '        vec2 uv = pixel_pos * shadow_texel_size;\n'
                                      '\n'
                                      '        vec4 shadow_factors;\n'
                                      '\n'
                                      '        for(int i=0; i<4; ++i)\n'
                                      '        {\n'
                                      '            vec2 shadow_uv = uv + offsets[i];\n'
                                      '            shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                      '            if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                      'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                      '            {\n'
                                      '                shadow_factors[i] = saturate(exp( -c * (shadow_depth - '
                                      'shadow_factors[i] + depth_bias)));\n'
                                      '            }\n'
                                      '            else\n'
                                      '            {\n'
                                      '                shadow_factors[i] = 1.0;\n'
                                      '            }\n'
                                      '        }\n'
                                      '\n'
                                      '        shadow_factor += mix(\n'
                                      '            mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                      '            mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                      '    }\n'
                                      '\n'
                                      '    return clamp(shadow_factor / float(SHADOWMAP_LOOP_COUNT), 0.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                      '{\n'
                                      '    float incidentTheta = acos(NdotL);\n'
                                      '    float outTheta = acos(NdotV);\n'
                                      '\n'
                                      '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                      '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                      '    float alpha = max(incidentTheta, outTheta);\n'
                                      '    float beta  = min(incidentTheta, outTheta);\n'
                                      '\n'
                                      '    vec3 u = normalize(V - N * NdotV);\n'
                                      '    vec3 v = normalize(L - N * NdotL);\n'
                                      '    float phiDiff = max(0.0, dot(u, v));\n'
                                      '\n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    return vec3((A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 fresnelSchlick(float cosTheta, vec3 F0)\n'
                                      '{\n'
                                      '    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n'
                                      '{\n'
                                      '    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                      '}\n'
                                      '\n'
                                      'float D_blinn(float roughness, float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float n = 2.0 / m2 - 2.0;\n'
                                      '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                      '}\n'
                                      '\n'
                                      'float D_beckmann(float roughness, float NdH)\n'
                                      '{\n'
                                      '    float m = roughness * roughness;\n'
                                      '    float m2 = m * m;\n'
                                      '    float NdH2 = NdH * NdH;\n'
                                      '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                      '}\n'
                                      '\n'
                                      'float DistributionGGX(float NdH, float roughness)\n'
                                      '{\n'
                                      '    float a      = roughness * roughness;\n'
                                      '    float a2     = a * a;\n'
                                      '    float NdH2 = NdH * NdH;\n'
                                      '\n'
                                      '    float num   = a2;\n'
                                      '    float denom = (NdH2 * (a2 - 1.0) + 1.0);\n'
                                      '    denom = PI * denom * denom;\n'
                                      '\n'
                                      '    return num / denom;\n'
                                      '}\n'
                                      '\n'
                                      'float GeometrySchlickGGX(float NdV, float roughness)\n'
                                      '{\n'
                                      '    float r = (roughness + 1.0);\n'
                                      '    float k = (r * r) / 8.0;\n'
                                      '    float num   = NdV;\n'
                                      '    float denom = NdV * (1.0 - k) + k;\n'
                                      '    return num / denom;\n'
                                      '}\n'
                                      '\n'
                                      'float GeometrySmith(float NdV, float NdL, float roughness)\n'
                                      '{\n'
                                      '    float ggx2  = GeometrySchlickGGX(NdV, roughness);\n'
                                      '    float ggx1  = GeometrySchlickGGX(NdL, roughness);\n'
                                      '    return ggx1 * ggx2;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float spec = max(0.0, LdR);\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                      '{\n'
                                      '    float k = 1.999 / (roughness * roughness);\n'
                                      '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec3 cooktorrance_specular(vec3 F, float NdL, float NdV, float NdH, float roughness)\n'
                                      '{\n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '    \n'
                                      '\n'
                                      '    \n'
                                      '    float NDF = DistributionGGX(NdH, roughness);\n'
                                      '    float G   = GeometrySmith(NdV, NdL, roughness);\n'
                                      '    vec3 numerator    = NDF * G * F;\n'
                                      '    float denominator = 4.0 * NdV * NdL;\n'
                                      '    return numerator / max(denominator, 0.001);\n'
                                      '}\n'
                                      '\n'
                                      'vec2 env_BRDF_pproximate(float NdV, float roughness)\n'
                                      '{\n'
                                      '    \n'
                                      '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                      '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                      '    vec4 r = roughness * c0 + c1;\n'
                                      '    float a004 = min(r.x * r.x, exp2(-9.28 * NdV)) * r.x + r.y;\n'
                                      '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                      '}\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      'vec4 surface_shading(vec4 base_color,\n'
                                      '                    vec3 emissive_color,\n'
                                      '                    float metallic,\n'
                                      '                    float roughness,\n'
                                      '                    float reflectance,\n'
                                      '                    float ssao_factor,\n'
                                      '                    vec4 scene_reflect_color,\n'
                                      '                    samplerCube texture_probe,\n'
                                      '                    sampler2D texture_shadow,\n'
                                      '                    vec2 screen_tex_coord,\n'
                                      '                    vec3 world_position,\n'
                                      '                    vec3 light_color,\n'
                                      '                    vec3 N,\n'
                                      '                    vec3 V,\n'
                                      '                    vec3 L,\n'
                                      '                    float depth)\n'
                                      '{\n'
                                      '    \n'
                                      '    vec3 scene_in_scatter;\n'
                                      '    vec3 scene_sun_irradiance;\n'
                                      '    vec3 scene_sky_irradiance;\n'
                                      '    float scene_shadow_length;\n'
                                      '    float scene_linear_depth = depth_to_linear_depth(depth);\n'
                                      '    GetSceneRadiance(ATMOSPHERE, scene_linear_depth, -V, N, scene_sun_irradiance, '
                                      'scene_sky_irradiance, scene_in_scatter);\n'
                                      '\n'
                                      '    light_color = light_color * scene_sun_irradiance;\n'
                                      '\n'
                                      '    \n'
                                      '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                      '\n'
                                      '    \n'
                                      '    vec3 R = reflect(-V, N);\n'
                                      '    vec3 H = normalize(V + L);\n'
                                      '\n'
                                      '    float NdL = dot(N, L);\n'
                                      '    NdL = max(0.0, NdL);\n'
                                      '\n'
                                      '    float NdV = max(0.001, dot(N, V));\n'
                                      '    float NdH = max(0.001, dot(N, H));\n'
                                      '    float HdV = max(0.001, dot(H, V));\n'
                                      '    float LdV = max(0.001, dot(L, V));\n'
                                      '\n'
                                      '    vec3 shadow_factor = vec3( get_shadow_factor(screen_tex_coord, world_position, '
                                      'texture_shadow) );\n'
                                      '    shadow_factor = max(shadow_factor, scene_sky_irradiance);\n'
                                      '\n'
                                      '    vec3 result = vec3(0.0, 0.0, 0.0);\n'
                                      '    float opacity = base_color.w;\n'
                                      '\n'
                                      '    vec3 F0 = vec3(0.04);\n'
                                      '    F0 = mix(max(F0, reflectance), base_color.xyz, metallic);\n'
                                      '    vec3 fresnel = fresnelSchlick(NdV, F0);\n'
                                      '\n'
                                      '    vec3 diffuse_light = vec3(0.0, 0.0, 0.0);\n'
                                      '    vec3 specular_light = vec3(0.0, 0.0, 0.0);\n'
                                      '\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '\n'
                                      '    \n'
                                      '    {\n'
                                      '        vec3 light_fresnel = fresnelSchlick(HdV, F0);\n'
                                      '\n'
                                      '        \n'
                                      '        diffuse_light += oren_nayar(roughness, NdL, NdV, N, V, L) / PI * NdL * '
                                      'light_color * shadow_factor;\n'
                                      '        specular_light += cooktorrance_specular(light_fresnel, NdL, NdV, NdH, '
                                      'roughness) * NdL * light_color * shadow_factor;\n'
                                      '\n'
                                      '        \n'
                                      '        for(int i=0; i<MAX_POINT_LIGHTS; ++i)\n'
                                      '        {\n'
                                      '            if(1.0 != POINT_LIGHTS[i].render)\n'
                                      '            {\n'
                                      '                break;\n'
                                      '            }\n'
                                      '\n'
                                      '            float point_light_radius = POINT_LIGHTS[i].radius;\n'
                                      '            vec3 point_light_dir = POINT_LIGHTS[i].pos.xyz - world_position;\n'
                                      '            float point_light_dist = length(point_light_dir);\n'
                                      '\n'
                                      '            if(point_light_radius < point_light_dist)\n'
                                      '            {\n'
                                      '                continue;\n'
                                      '            }\n'
                                      '\n'
                                      '            point_light_dir /= point_light_dist;\n'
                                      '\n'
                                      '            vec3 point_light_half = normalize(V + point_light_dir);\n'
                                      '            float point_light_attenuation = clamp(1.0 - point_light_dist / '
                                      'point_light_radius, 0.0, 1.0);\n'
                                      '            point_light_attenuation *= point_light_attenuation;\n'
                                      '            vec3 point_light_color = POINT_LIGHTS[i].color.xyz * '
                                      'point_light_attenuation;\n'
                                      '\n'
                                      '            float point_light_NdL = max(0.01, dot(N, point_light_dir));\n'
                                      '            float point_light_NdH = max(0.01, dot(N, point_light_half));\n'
                                      '\n'
                                      '            diffuse_light += oren_nayar(roughness, point_light_NdL, NdV, N, V, '
                                      'point_light_dir) / PI * point_light_NdL * point_light_color;\n'
                                      '            specular_light += cooktorrance_specular(light_fresnel, point_light_NdL, '
                                      'NdV, point_light_NdH, roughness) * point_light_NdL * point_light_color;\n'
                                      '        }\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    {\n'
                                      '        const vec2 env_size = textureSize(texture_probe, 0);\n'
                                      '        const float max_env_mipmap = 8.0; \n'
                                      '        vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                      '        vec3 shValue = fresnel * envBRDF.x + envBRDF.y;\n'
                                      '\n'
                                      '        vec3 ibl_diffuse_light = textureCubeLod(texture_probe, invert_y(N), '
                                      'max_env_mipmap).xyz;\n'
                                      '        vec3 ibl_specular_light = textureCubeLod(texture_probe, invert_y(R), '
                                      'max_env_mipmap * roughness).xyz;\n'
                                      '\n'
                                      '        \n'
                                      '        if(RENDER_SSR)\n'
                                      '        {\n'
                                      '            \n'
                                      '            ibl_specular_light.xyz = mix(ibl_specular_light.xyz, '
                                      'scene_reflect_color.xyz, scene_reflect_color.w);\n'
                                      '        }\n'
                                      '\n'
                                      '        diffuse_light += ibl_diffuse_light * shValue * shadow_factor;\n'
                                      '        specular_light += ibl_specular_light * shValue * shadow_factor;\n'
                                      '    }\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '    \n'
                                      '    diffuse_light *= base_color.xyz * clamp((vec3(1.0) - fresnel) * (1.0 - metallic), '
                                      '0.0, 1.0);\n'
                                      '    specular_light = mix(specular_light, specular_light * base_color.xyz, '
                                      'vec3(metallic));\n'
                                      '\n'
                                      '    result = diffuse_light + specular_light;\n'
                                      '\n'
                                      '    \n'
                                      '    if(RENDER_SSAO)\n'
                                      '    {\n'
                                      '        result *= ssao_factor;\n'
                                      '    }\n'
                                      '\n'
                                      '    \n'
                                      '    result += emissive_color;\n'
                                      '\n'
                                      '    return vec4(max(vec3(0.0), result), opacity);\n'
                                      '}\n'
                                      '#endif /* UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "default_vs.glsl"\n'
                                      '#ifndef UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52\n'
                                      '#define UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52\n'
                                      '\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "scene_constants.glsl"\n'
                                      '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                      '#define WORK_GROUP_SIZE 64\n'
                                      '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                      '//------------ INCLUDE -------------//\n'
                                      '// #include "default_material.glsl"\n'
                                      '#ifndef UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66\n'
                                      '#define UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '#ifdef MATERIAL_COMPONENTS\n'
                                      '    uniform float brightness;\n'
                                      '    uniform float reflectance;\n'
                                      '    uniform float roughness;\n'
                                      '    uniform float metalicness;\n'
                                      '    uniform float normal_intensity;\n'
                                      '    uniform vec2 uv_tiling;\n'
                                      '    uniform vec4 emissive_color;\n'
                                      '    uniform vec4 diffuse_color;\n'
                                      '    uniform sampler2D texture_diffuse;\n'
                                      '    uniform sampler2D texture_material;\n'
                                      '    uniform sampler2D texture_normal;\n'
                                      '#if TRANSPARENT_MATERIAL == 1\n'
                                      '#endif\n'
                                      '#endif\n'
                                      '\n'
                                      'vec4 get_emissive_color()\n'
                                      '{\n'
                                      '    return emissive_color;\n'
                                      '}\n'
                                      '\n'
                                      'vec4 get_base_color(vec2 tex_coord)\n'
                                      '{\n'
                                      '    vec4 color = texture2D(texture_diffuse, tex_coord);\n'
                                      '    \n'
                                      '    color.xyz = pow(color.xyz, vec3(2.2));\n'
                                      '    color.xyz = color.xyz * brightness * diffuse_color.xyz;\n'
                                      '    return color;\n'
                                      '}\n'
                                      '\n'
                                      'float get_reflection()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_edge_tint_color()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_sss_color()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float get_sss_scale()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_normal(vec2 tex_coord)\n'
                                      '{\n'
                                      '    \n'
                                      '    vec3 normal = texture2D(texture_normal, tex_coord).xzy * 2.0 - 1.0;\n'
                                      '    normal.xz *= normal_intensity;\n'
                                      '    return normalize(normal);\n'
                                      '}\n'
                                      '\n'
                                      'float get_ior()\n'
                                      '{\n'
                                      '    return 1.0;\n'
                                      '}\n'
                                      '\n'
                                      'float get_roughness()\n'
                                      '{\n'
                                      '    return clamp(roughness, 0.05, 1.0);\n'
                                      '}\n'
                                      '\n'
                                      'float get_metalicness()\n'
                                      '{\n'
                                      '    return metalicness;\n'
                                      '}\n'
                                      '\n'
                                      'vec3 get_world_offset()\n'
                                      '{\n'
                                      '    return vec3(1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '#endif /* UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66 */\n'
                                      '\n'
                                      'uniform bool is_instancing;\n'
                                      'uniform mat4 model;\n'
                                      '\n'
                                      '#if 1 == SKELETAL\n'
                                      'uniform mat4 bone_matrices[MAX_BONES];\n'
                                      'uniform mat4 prev_bone_matrices[MAX_BONES];\n'
                                      '#endif\n'
                                      '\n'
                                      'struct VERTEX_OUTPUT\n'
                                      '{\n'
                                      '    vec3 world_position;\n'
                                      '    vec3 vertex_normal;\n'
                                      '    vec4 vertex_color;\n'
                                      '    vec2 tex_coord;\n'
                                      '    mat4 tangent_to_world;\n'
                                      '    vec4 projection_pos;\n'
                                      '    vec4 prev_projection_pos;\n'
                                      '};\n'
                                      '\n'
                                      '\n'
                                      '\n'
                                      '#ifdef VERTEX_SHADER\n'
                                      '#if 1 == SKELETAL\n'
                                      'layout (location = 5) in vec4 vs_in_bone_indicies;\n'
                                      'layout (location = 6) in vec4 vs_in_bone_weights;\n'
                                      '#endif\n'
                                      '#if 1 == SKELETAL\n'
                                      '    for(int i=0; i<MAX_BONES_PER_VERTEX; ++i)\n'
                                      '    {\n'
                                      '        prev_position += (prev_bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_position, 1.0)) * vs_in_bone_weights[i];\n'
                                      '        position += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_position, '
                                      '1.0)) * vs_in_bone_weights[i];\n'
                                      '        vertex_normal += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_normal, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                      '        vertex_tangent += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                      'vec4(vs_in_tangent, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                      '    }\n'
                                      '    position /= position.w;\n'
                                      '    prev_position /= prev_position.w;\n'
                                      '#else\n'
                                      '#endif\n'
                                      '#endif\n'
                                      '#endif /* UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52 */\n'
                                      '\n'
                                      '\n'
                                      '#ifdef FRAGMENT_SHADER\n'
                                      'layout (location = 0) in VERTEX_OUTPUT vs_output;\n'
                                      '\n'
                                      'layout (location = 0) out vec4 fs_ouptut;\n'
                                      '\n'
                                      'void main()\n'
                                      '{\n'
                                      '    fs_ouptut = vec4(1.0, 1.0, 1.0, 1.0);\n'
                                      '}\n'
                                      '#endif',
                  GL_VERTEX_SHADER: '#version 430 core\n'
                                    '# extension GL_EXT_texture_array : enable\n'
                                    '#define MATERIAL_COMPONENTS 1\n'
                                    '#define VERTEX_SHADER 1\n'
                                    '#define SKELETAL 1\n'
                                    '#define COMBINED_SCATTERING_TEXTURES 0\n'
                                    '#define TRANSPARENT_MATERIAL 0\n'
                                    '#if __VERSION__ >= 130\n'
                                    '#define texture2D texture\n'
                                    '#define texture2DLod textureLod\n'
                                    '#define texture2DGrad textureGrad\n'
                                    '#define texture2DArray texture\n'
                                    '#define texture2DArrayLod textureLod\n'
                                    '#define texture2DArrayGrad textureGrad\n'
                                    '#define texture3D texture\n'
                                    '#define texture3DLod textureLod\n'
                                    '#define texture3DGrad textureGrad\n'
                                    '#define textureCube texture\n'
                                    '#define textureCubeLod textureLod\n'
                                    '#define textureCubeGrad textureGrad\n'
                                    '#endif\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    'layout(std140, binding=0) uniform scene_constants\n'
                                    '{\n'
                                    '    float TIME;\n'
                                    '    float JITTER_FRAME;\n'
                                    '    bool RENDER_SSR;\n'
                                    '    bool RENDER_SSAO;\n'
                                    '    vec2 SCREEN_SIZE;\n'
                                    '    vec2 BACKBUFFER_SIZE;\n'
                                    '    vec2 MOUSE_POS;\n'
                                    '    float DELTA_TIME;\n'
                                    '    int SHADOWMAP_LOOP_COUNT;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=1) uniform view_constants\n'
                                    '{\n'
                                    '    mat4 VIEW;\n'
                                    '    mat4 INV_VIEW;\n'
                                    '    mat4 VIEW_ORIGIN;\n'
                                    '    mat4 INV_VIEW_ORIGIN;\n'
                                    '    mat4 PROJECTION;\n'
                                    '    mat4 INV_PROJECTION;\n'
                                    '    vec3 CAMERA_POSITION;\n'
                                    '    float VIEW_DUMMY_0;\n'
                                    '    vec2 NEAR_FAR;\n'
                                    '    vec2 JITTER_DELTA;\n'
                                    '    vec2 JITTER_OFFSET;\n'
                                    '    vec2 VIEWCONSTANTS_DUMMY0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=2) uniform view_projection\n'
                                    '{\n'
                                    '    mat4 VIEW_PROJECTION;\n'
                                    '    mat4 PREV_VIEW_PROJECTION;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=3) uniform light_constants\n'
                                    '{\n'
                                    '    vec3 LIGHT_POSITION;\n'
                                    '    float LIGHT_DUMMY_0;\n'
                                    '    vec3 LIGHT_DIRECTION;\n'
                                    '    float LIGHT_DUMMY_1;\n'
                                    '    vec4 LIGHT_COLOR;\n'
                                    '    mat4 SHADOW_MATRIX;\n'
                                    '};\n'
                                    '\n'
                                    'const int MAX_POINT_LIGHTS = 10;\n'
                                    '\n'
                                    'struct POINT_LIGHT\n'
                                    '{\n'
                                    '    vec3 color;\n'
                                    '    float radius;\n'
                                    '    vec3 pos;\n'
                                    '    float render;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=4) uniform point_light_constants\n'
                                    '{\n'
                                    '    POINT_LIGHT POINT_LIGHTS[MAX_POINT_LIGHTS];\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'layout(std140, binding=5) uniform particle_common\n'
                                    '{\n'
                                    '    vec3 PARTICLE_COLOR;\n'
                                    '    int PARTICLE_ALIGN_MODE;\n'
                                    '    ivec2 PARTICLE_CELL_COUNT;\n'
                                    '    int PARTICLE_BLEND_MODE;\n'
                                    '    int PARTICLE_COMMON_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    'layout(std140, binding=6) uniform particle_infos\n'
                                    '{\n'
                                    '    mat4 PARTICLE_PARENT_MATRIX;\n'
                                    '    vec2 PARTICLE_DELAY;\n'
                                    '    vec2 PARTICLE_LIFE_TIME;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MIN;\n'
                                    '    float PARTICLE_FADE_IN;\n'
                                    '    vec3 PARTICLE_TRANSFORM_ROTATION_MAX;\n'
                                    '    float PARTICLE_FADE_OUT;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MIN;\n'
                                    '    float PARTICLE_OPACITY;\n'
                                    '    vec3 PARTICLE_TRANSFORM_SCALE_MAX;\n'
                                    '    bool PARTICLE_ENABLE_VECTOR_FIELD;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MIN;\n'
                                    '    float PARTICLE_VECTOR_FIELD_STRENGTH;\n'
                                    '    vec3 PARTICLE_VELOCITY_POSITION_MAX;\n'
                                    '    float PARTICLE_VECTOR_FIELD_TIGHTNESS;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MIN;\n'
                                    '    uint PARTICLE_MAX_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_ROTATION_MAX;\n'
                                    '    uint PARTICLE_SPAWN_COUNT;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MIN;\n'
                                    '    float PARTICLE_VELOCITY_STRETCH;\n'
                                    '    vec3 PARTICLE_VELOCITY_SCALE_MAX;\n'
                                    '    float PARTICLE_VELOCITY_ACCELERATION;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_MATRIX;\n'
                                    '    mat4 PARTICLE_VECTOR_FIELD_INV_MATRIX;\n'
                                    '    vec3 PARTICLE_SPAWN_VOLUME_INFO;\n'
                                    '    uint PARTICLE_SPAWN_VOLUME_TYPE;\n'
                                    '    mat4 PARTICLE_SPAWN_VOLUME_MATRIX;\n'
                                    '    vec2 PARTICLE_VELOCITY_LIMIT;\n'
                                    '    float PARTICLE_FORCE_GRAVITY;\n'
                                    '    float PARTICLE_PLAY_SPEED;\n'
                                    '    uint PARTICLE_VELOCITY_TYPE;\n'
                                    '    float PARTICLE_FORCE_ELASTICITY;\n'
                                    '    float PARTICLE_FORCE_FRICTION;\n'
                                    '    uint PARTICLE_DUMMY_0;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int BLEND = 0;\n'
                                    'const int ADDITIVE = 1;\n'
                                    'const int MULTIPLY = 2;\n'
                                    'const int SUBTRACT = 3;\n'
                                    '\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '\n'
                                    'const int MAX_BONES_PER_VERTEX = 4;\n'
                                    'const int MAX_BONES = 100;\n'
                                    'const float SHADOW_BIAS = -0.0001;\n'
                                    '\n'
                                    'const float PI = 3.14159265358979323846;\n'
                                    'const float HALF_PI = PI * 0.5;\n'
                                    'const float TWO_PI = PI * 2.0;\n'
                                    'const float deg = PI / 180.0;\n'
                                    '\n'
                                    'const vec3 kSphereCenter = vec3(1.0, 1.0, -2.0);\n'
                                    'const float kSphereRadius = 1.0;\n'
                                    'const vec3 kSphereAlbedo = vec3(0.8);\n'
                                    'const vec3 kGroundAlbedo = vec3(0.0, 0.0, 0.04);\n'
                                    '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                    '#define UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                    '\n'
                                    'const int FilterTypes_Box = 0;\n'
                                    'const int FilterTypes_Triangle = 1;\n'
                                    'const int FilterTypes_Gaussian = 2;\n'
                                    'const int FilterTypes_BlackmanHarris = 3;\n'
                                    'const int FilterTypes_Smoothstep = 4;\n'
                                    'const int FilterTypes_BSpline = 5;\n'
                                    'const int FilterTypes_CatmullRom = 6;\n'
                                    'const int FilterTypes_Mitchell = 7;\n'
                                    'const int FilterTypes_GeneralizedCubic = 8;\n'
                                    'const int FilterTypes_Sinc = 9;\n'
                                    '\n'
                                    '\n'
                                    'float FilterBox(in float x)\n'
                                    '{\n'
                                    '    return x <= 1.0 ? 1.0 : 0.0;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterTriangle(in float x)\n'
                                    '{\n'
                                    '    return clamp(1.0f - x, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterGaussian(in float x)\n'
                                    '{\n'
                                    '    const float sigma = 0.25;\n'
                                    '    const float g = 1.0f / sqrt(2.0f * 3.14159f * sigma * sigma);\n'
                                    '    return (g * exp(-(x * x) / (2 * sigma * sigma)));\n'
                                    '}\n'
                                    '\n'
                                    'float FilterCubic(in float x, in float B, in float C)\n'
                                    '{\n'
                                    '    float y = 0.0f;\n'
                                    '    float x2 = x * x;\n'
                                    '    float x3 = x * x * x;\n'
                                    '\n'
                                    '    if(x < 1)\n'
                                    '    {\n'
                                    '        y = (12 - 9 * B - 6 * C) * x3 + (-18 + 12 * B + 6 * C) * x2 + (6 - 2 * B);\n'
                                    '    }\n'
                                    '    else if(x <= 2)\n'
                                    '    {\n'
                                    '        y = (-B - 6 * C) * x3 + (6 * B + 30 * C) * x2 + (-12 * B - 48 * C) * x + (8 * B + '
                                    '24 * C);\n'
                                    '    }\n'
                                    '\n'
                                    '    return y / 6.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSinc(in float x, in float filterRadius)\n'
                                    '{\n'
                                    '    float s;\n'
                                    '    x *= filterRadius * 2.0f;\n'
                                    '    if(x < 0.001f)\n'
                                    '        s = 1.0f;\n'
                                    '    else\n'
                                    '        s = sin(x * PI) / (x * PI);\n'
                                    '    return s;\n'
                                    '}\n'
                                    '\n'
                                    'float FilterBlackmanHarris(in float x)\n'
                                    '{\n'
                                    '    x = 1.0f - x;\n'
                                    '    const float a0 = 0.35875f;\n'
                                    '    const float a1 = 0.48829f;\n'
                                    '    const float a2 = 0.14128f;\n'
                                    '    const float a3 = 0.01168f;\n'
                                    '    return clamp(a0 - a1 * cos(PI * x) + a2 * cos(2 * PI * x) - a3 * cos(3 * PI * x), '
                                    '0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float FilterSmoothstep(in float x)\n'
                                    '{\n'
                                    '    return 1.0f - smoothstep(0.0f, 1.0f, x);\n'
                                    '}\n'
                                    '\n'
                                    'float Filter(in float x, in int filterType, in float filterRadius, in bool rescaleCubic)\n'
                                    '{\n'
                                    '    \n'
                                    '    \n'
                                    '    float cubicX = rescaleCubic ? x * 2.0f : x;\n'
                                    '\n'
                                    '    if(filterType == FilterTypes_Box)\n'
                                    '        return FilterBox(x);\n'
                                    '    else if(filterType == FilterTypes_Triangle)\n'
                                    '        return FilterTriangle(x);\n'
                                    '    else if(filterType == FilterTypes_Gaussian)\n'
                                    '        return FilterGaussian(x);\n'
                                    '    else if(filterType == FilterTypes_BlackmanHarris)\n'
                                    '        return FilterBlackmanHarris(x);\n'
                                    '    else if(filterType == FilterTypes_Smoothstep)\n'
                                    '        return FilterSmoothstep(x);\n'
                                    '    else if(filterType == FilterTypes_BSpline)\n'
                                    '        return FilterCubic(cubicX, 1.0, 0.0f);\n'
                                    '    else if(filterType == FilterTypes_CatmullRom)\n'
                                    '        return FilterCubic(cubicX, 0, 0.5f);\n'
                                    '    else if(filterType == FilterTypes_Mitchell)\n'
                                    '        return FilterCubic(cubicX, 1 / 3.0f, 1 / 3.0f);\n'
                                    '    else if(filterType == FilterTypes_GeneralizedCubic)\n'
                                    '        return FilterCubic(cubicX, 0.33, 0.33);\n'
                                    '    else if(filterType == FilterTypes_Sinc)\n'
                                    '        return FilterSinc(x, filterRadius);\n'
                                    '    else\n'
                                    '        return 1.0f;\n'
                                    '}\n'
                                    '\n'
                                    'float saturate(float value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec2 saturate(vec2 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec3 saturate(vec3 value) { return clamp(value, 0.0, 1.0); }\n'
                                    'vec4 saturate(vec4 value) { return clamp(value, 0.0, 1.0); }\n'
                                    '\n'
                                    'float get_luminance(vec3 color)\n'
                                    '{\n'
                                    '    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float depth_to_linear_depth(float depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    depth = depth * 2.0 - 1.0;\n'
                                    '    \n'
                                    '    return 2.0 * zNear * zFar / (zFar + zNear - depth * (zFar - zNear));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float linear_depth_to_depth(float linear_depth)\n'
                                    '{\n'
                                    '    const float zNear = NEAR_FAR.x;\n'
                                    '    const float zFar = NEAR_FAR.y;\n'
                                    '    \n'
                                    '    float depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    \n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_depth(vec4 linear_depth)\n'
                                    '{\n'
                                    '    const vec4 zNear = NEAR_FAR.xxxx;\n'
                                    '    const vec4 zFar = NEAR_FAR.yyyy;\n'
                                    '    vec4 depth = (zFar + zNear - 2.0 * zNear * zFar / linear_depth) / (zFar - zNear);\n'
                                    '    return depth * 0.5 + 0.5;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 depth_to_relative_world(vec2 tex_coord, float depth)\n'
                                    '{\n'
                                    '    vec4 clip_coord = vec4(tex_coord * 2.0 - 1.0, depth * 2.0 - 1.0, 1.0);\n'
                                    '    vec4 relative_pos = INV_VIEW_ORIGIN * INV_PROJECTION * clip_coord;\n'
                                    '    relative_pos /= relative_pos.w;\n'
                                    '    return relative_pos;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 linear_depth_to_relative_world(vec2 tex_coord, float linear_depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    float depth = linear_depth_to_depth(linear_depth);\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return depth_to_relative_world(tex_coord, depth);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'float PseudoRandom(vec2 xy)\n'
                                    '{\n'
                                    '    vec2 pos = fract(xy / 128.0f) * 128.0f + vec2(-64.340622f, -72.465622f);\n'
                                    '\n'
                                    '    \n'
                                    '    return fract(dot(pos.xyx * pos.xyy, vec3(20.390625f, 60.703125f, 2.4281209f)));\n'
                                    '}\n'
                                    '\n'
                                    'float rand(vec2 co){\n'
                                    '    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand3(vec3 uvw, float scale)\n'
                                    '{\n'
                                    '\treturn fract(sin(dot(uvw, vec3(12.9898, 78.233, 45.164))) * 43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    'float rand4(vec4 seed4){\n'
                                    '    return fract(sin(dot(seed4, vec4(12.9898, 78.233, 45.164, 94.673))) * '
                                    '43758.5453123);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 generate_random(float random_seed)\n'
                                    '{\n'
                                    '    vec4 random_factor;\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_seed));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '    return random_factor;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random1(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.w = random_factor.x;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random2(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.w = random_factor.y;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random3(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = random_factor.z;\n'
                                    '}\n'
                                    '\n'
                                    'void generate_random4(inout vec4 random_factor)\n'
                                    '{\n'
                                    '    float time = fract(TIME * 0.001);\n'
                                    '    random_factor.x = rand(vec2(time, random_factor.w));\n'
                                    '    random_factor.y = rand(vec2(random_factor.x, time));\n'
                                    '    random_factor.z = rand(vec2(time, random_factor.y));\n'
                                    '    random_factor.w = rand(vec2(random_factor.z, time));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 invert_y(vec3 vector)\n'
                                    '{\n'
                                    '    return vec3(vector.x, -vector.y, vector.z);\n'
                                    '}\n'
                                    '\n'
                                    'float safe_atan(float y, float x)\n'
                                    '{\n'
                                    '    return mod(atan(y, x), TWO_PI);\n'
                                    '}\n'
                                    '\n'
                                    'vec2 safe_normalize(vec2 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 safe_normalize(vec3 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '\n'
                                    'vec4 safe_normalize(vec4 vector)\n'
                                    '{\n'
                                    '    float dist = length(vector);\n'
                                    '    return vector / (dist == 0.0 ? 1.0 : dist);\n'
                                    '}\n'
                                    '#endif /* UUID_c11f48f5_9502_346c_b8aa_1938654b93b2 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "shading.glsl"\n'
                                    '#ifndef UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d\n'
                                    '#define UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "PCFKernels.glsl"\n'
                                    '#ifndef UUID_26267165_d58b_328e_9ecb_56aeb0edfdce\n'
                                    '#define UUID_26267165_d58b_328e_9ecb_56aeb0edfdce\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'const int PoissonSampleCount = 64;\n'
                                    '\n'
                                    '\n'
                                    'const vec2 PoissonSamples[PoissonSampleCount] =\n'
                                    '{\n'
                                    '    vec2(-0.5119625f, -0.4827938f),\n'
                                    '    vec2(-0.2171264f, -0.4768726f),\n'
                                    '    vec2(-0.7552931f, -0.2426507f),\n'
                                    '    vec2(-0.7136765f, -0.4496614f),\n'
                                    '    vec2(-0.5938849f, -0.6895654f),\n'
                                    '    vec2(-0.3148003f, -0.7047654f),\n'
                                    '    vec2(-0.42215f, -0.2024607f),\n'
                                    '    vec2(-0.9466816f, -0.2014508f),\n'
                                    '    vec2(-0.8409063f, -0.03465778f),\n'
                                    '    vec2(-0.6517572f, -0.07476326f),\n'
                                    '    vec2(-0.1041822f, -0.02521214f),\n'
                                    '    vec2(-0.3042712f, -0.02195431f),\n'
                                    '    vec2(-0.5082307f, 0.1079806f),\n'
                                    '    vec2(-0.08429877f, -0.2316298f),\n'
                                    '    vec2(-0.9879128f, 0.1113683f),\n'
                                    '    vec2(-0.3859636f, 0.3363545f),\n'
                                    '    vec2(-0.1925334f, 0.1787288f),\n'
                                    '    vec2(0.003256182f, 0.138135f),\n'
                                    '    vec2(-0.8706837f, 0.3010679f),\n'
                                    '    vec2(-0.6982038f, 0.1904326f),\n'
                                    '    vec2(0.1975043f, 0.2221317f),\n'
                                    '    vec2(0.1507788f, 0.4204168f),\n'
                                    '    vec2(0.3514056f, 0.09865579f),\n'
                                    '    vec2(0.1558783f, -0.08460935f),\n'
                                    '    vec2(-0.0684978f, 0.4461993f),\n'
                                    '    vec2(0.3780522f, 0.3478679f),\n'
                                    '    vec2(0.3956799f, -0.1469177f),\n'
                                    '    vec2(0.5838975f, 0.1054943f),\n'
                                    '    vec2(0.6155105f, 0.3245716f),\n'
                                    '    vec2(0.3928624f, -0.4417621f),\n'
                                    '    vec2(0.1749884f, -0.4202175f),\n'
                                    '    vec2(0.6813727f, -0.2424808f),\n'
                                    '    vec2(-0.6707711f, 0.4912741f),\n'
                                    '    vec2(0.0005130528f, -0.8058334f),\n'
                                    '    vec2(0.02703013f, -0.6010728f),\n'
                                    '    vec2(-0.1658188f, -0.9695674f),\n'
                                    '    vec2(0.4060591f, -0.7100726f),\n'
                                    '    vec2(0.7713396f, -0.4713659f),\n'
                                    '    vec2(0.573212f, -0.51544f),\n'
                                    '    vec2(-0.3448896f, -0.9046497f),\n'
                                    '    vec2(0.1268544f, -0.9874692f),\n'
                                    '    vec2(0.7418533f, -0.6667366f),\n'
                                    '    vec2(0.3492522f, 0.5924662f),\n'
                                    '    vec2(0.5679897f, 0.5343465f),\n'
                                    '    vec2(0.5663417f, 0.7708698f),\n'
                                    '    vec2(0.7375497f, 0.6691415f),\n'
                                    '    vec2(0.2271994f, -0.6163502f),\n'
                                    '    vec2(0.2312844f, 0.8725659f),\n'
                                    '    vec2(0.4216993f, 0.9002838f),\n'
                                    '    vec2(0.4262091f, -0.9013284f),\n'
                                    '    vec2(0.2001408f, -0.808381f),\n'
                                    '    vec2(0.149394f, 0.6650763f),\n'
                                    '    vec2(-0.09640376f, 0.9843736f),\n'
                                    '    vec2(0.7682328f, -0.07273844f),\n'
                                    '    vec2(0.04146584f, 0.8313184f),\n'
                                    '    vec2(0.9705266f, -0.1143304f),\n'
                                    '    vec2(0.9670017f, 0.1293385f),\n'
                                    '    vec2(0.9015037f, -0.3306949f),\n'
                                    '    vec2(-0.5085648f, 0.7534177f),\n'
                                    '    vec2(0.9055501f, 0.3758393f),\n'
                                    '    vec2(0.7599946f, 0.1809109f),\n'
                                    '    vec2(-0.2483695f, 0.7942952f),\n'
                                    '    vec2(-0.4241052f, 0.5581087f),\n'
                                    '    vec2(-0.1020106f, 0.6724468f),\n'
                                    '};\n'
                                    '#endif /* UUID_26267165_d58b_328e_9ecb_56aeb0edfdce */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "utility.glsl"\n'
                                    '#ifndef UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                    '#define UUID_c11f48f5_9502_346c_b8aa_1938654b93b2\n'
                                    '#endif /* UUID_c11f48f5_9502_346c_b8aa_1938654b93b2 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/atmosphere_predefine.glsl"\n'
                                    '#ifndef UUID_7930fe11_5b93_388d_b01e_c1ba150d8083\n'
                                    '#define UUID_7930fe11_5b93_388d_b01e_c1ba150d8083\n'
                                    'const int TRANSMITTANCE_TEXTURE_WIDTH = 256;\n'
                                    'const int TRANSMITTANCE_TEXTURE_HEIGHT = 64;\n'
                                    'const int SCATTERING_TEXTURE_R_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_MU_SIZE = 128;\n'
                                    'const int SCATTERING_TEXTURE_MU_S_SIZE = 32;\n'
                                    'const int SCATTERING_TEXTURE_NU_SIZE = 8;\n'
                                    'const int IRRADIANCE_TEXTURE_WIDTH = 64;\n'
                                    'const int IRRADIANCE_TEXTURE_HEIGHT = 16;\n'
                                    'const vec2 IRRADIANCE_TEXTURE_SIZE = vec2(64, 16);\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "precomputed_atmosphere/definitions.glsl"\n'
                                    '#ifndef UUID_cd06d49e_87b7_359c_aed9_48f39d158c76\n'
                                    '#define UUID_cd06d49e_87b7_359c_aed9_48f39d158c76\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 earth_center;\n'
                                    'uniform vec2 sun_size;\n'
                                    'uniform float atmosphere_exposure;\n'
                                    'uniform bool render_light_probe_mode;\n'
                                    '\n'
                                    'uniform sampler2D transmittance_texture;\n'
                                    'uniform sampler2D irradiance_texture;\n'
                                    'uniform sampler3D scattering_texture;\n'
                                    'uniform sampler3D single_mie_scattering_texture;\n'
                                    'uniform sampler3D single_rayleigh_scattering_texture;\n'
                                    'uniform sampler3D scattering_density_texture;\n'
                                    'uniform sampler3D multiple_scattering_texture;\n'
                                    '\n'
                                    '\n'
                                    'uniform vec3 SKY_RADIANCE_TO_LUMINANCE;\n'
                                    'uniform vec3 SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '\n'
                                    'const float atmosphere_ratio = 0.1;\n'
                                    '\n'
                                    'struct DensityProfileLayer\n'
                                    '{\n'
                                    '    float width;\n'
                                    '    float exp_term;\n'
                                    '    float exp_scale;\n'
                                    '    float linear_term;\n'
                                    '    float constant_term;\n'
                                    '};\n'
                                    '\n'
                                    'struct DensityProfile\n'
                                    '{\n'
                                    '    DensityProfileLayer layers[2];\n'
                                    '};\n'
                                    '\n'
                                    'struct AtmosphereParameters\n'
                                    '{\n'
                                    '    vec3 solar_irradiance;\n'
                                    '    float sun_angular_radius;\n'
                                    '    float bottom_radius;\n'
                                    '    float top_radius;\n'
                                    '    DensityProfile rayleigh_density;\n'
                                    '    vec3 rayleigh_scattering;\n'
                                    '    DensityProfile mie_density;\n'
                                    '    vec3 mie_scattering;\n'
                                    '    vec3 mie_extinction;\n'
                                    '    float mie_phase_function_g;\n'
                                    '    DensityProfile absorption_density;\n'
                                    '    vec3 absorption_extinction;\n'
                                    '    vec3 ground_albedo;\n'
                                    '    float mu_s_min;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    'float ClampCosine(float mu)\n'
                                    '{\n'
                                    '    return clamp(mu, -1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampDistance(float d)\n'
                                    '{\n'
                                    '    return max(d, 0.0);\n'
                                    '}\n'
                                    '\n'
                                    'float ClampRadius(const in AtmosphereParameters atmosphere, float r)\n'
                                    '{\n'
                                    '    return clamp(r, atmosphere.bottom_radius, atmosphere.top_radius);\n'
                                    '}\n'
                                    '\n'
                                    'float SafeSqrt(float a)\n'
                                    '{\n'
                                    '    return sqrt(max(a, 0.0));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToTopAtmosphereBoundary(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.top_radius * '
                                    'atmosphere.top_radius;\n'
                                    '    return ClampDistance(-r * mu + SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'float DistanceToBottomAtmosphereBoundary(const in AtmosphereParameters atmosphere, float '
                                    'r, float mu)\n'
                                    '{\n'
                                    '    float discriminant = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    return ClampDistance(-r * mu - SafeSqrt(discriminant));\n'
                                    '}\n'
                                    '\n'
                                    'bool RayIntersectsGround(const in AtmosphereParameters atmosphere, float r, float mu)\n'
                                    '{\n'
                                    '    if(mu < 0.0)\n'
                                    '    {\n'
                                    '        float result = r * r * (mu * mu - 1.0) + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '        if(0.0 <= result)\n'
                                    '        {\n'
                                    '            return true;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return false;\n'
                                    '}\n'
                                    '\n'
                                    'float GetLayerDensity(const in DensityProfileLayer layer, float altitude)\n'
                                    '{\n'
                                    '    float density =\n'
                                    '        layer.exp_term * exp(layer.exp_scale * altitude) + layer.linear_term * altitude + '
                                    'layer.constant_term;\n'
                                    '    return clamp(density, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float GetProfileDensity(const in DensityProfile profile, float altitude)\n'
                                    '{\n'
                                    '    return altitude < profile.layers[0].width ?\n'
                                    '        GetLayerDensity(profile.layers[0], altitude) : GetLayerDensity(profile.layers[1], '
                                    'altitude);\n'
                                    '}\n'
                                    '\n'
                                    'float ComputeOpticalLengthToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in DensityProfile profile,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 500;\n'
                                    '    float dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / float(SAMPLE_COUNT);\n'
                                    '    float result = 0.0;\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);\n'
                                    '        float y_i = GetProfileDensity(profile, r_i - atmosphere.bottom_radius);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        result += y_i * weight_i * dx;\n'
                                    '    }\n'
                                    '    return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu)\n'
                                    '{\n'
                                    '    return exp(-(\n'
                                    '        atmosphere.rayleigh_scattering *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.rayleigh_density, r, mu) +\n'
                                    '        atmosphere.mie_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.mie_density, r, mu) +\n'
                                    '        atmosphere.absorption_extinction *\n'
                                    '            ComputeOpticalLengthToTopAtmosphereBoundary(atmosphere, '
                                    'atmosphere.absorption_density, r, mu)));\n'
                                    '}\n'
                                    '\n'
                                    'float GetTextureCoordFromUnitRange(float x, int texture_size)\n'
                                    '{\n'
                                    '    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'float GetUnitRangeFromTextureCoord(float u, int texture_size)\n'
                                    '{\n'
                                    '    return (u - 0.5 / float(texture_size)) / (1.0 - 1.0 / float(texture_size));\n'
                                    '}\n'
                                    '\n'
                                    'vec2 GetTransmittanceTextureUvFromRMu(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float x_mu = (d - d_min) / (d_max - d_min);\n'
                                    '    float x_r = rho / H;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu, TRANSMITTANCE_TEXTURE_WIDTH),\n'
                                    '              GetTextureCoordFromUnitRange(x_r, TRANSMITTANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    'void GetRMuFromTransmittanceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu)\n'
                                    '{\n'
                                    '    float x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius -\n'
                                    '        atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '\n'
                                    '    float rho = H * x_r;\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float d_min = atmosphere.top_radius - r;\n'
                                    '    float d_max = rho + H;\n'
                                    '    float d = d_min + x_mu * (d_max - d_min);\n'
                                    '    mu = (d == 0.0) ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);\n'
                                    '    mu = ClampCosine(mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeTransmittanceToTopAtmosphereBoundarytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    const vec2 TRANSMITTANCE_TEXTURE_SIZE = vec2(TRANSMITTANCE_TEXTURE_WIDTH, '
                                    'TRANSMITTANCE_TEXTURE_HEIGHT);\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    GetRMuFromTransmittanceTextureUv(atmosphere, gl_frag_coord / '
                                    'TRANSMITTANCE_TEXTURE_SIZE, r, mu);\n'
                                    '    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToTopAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r, float mu)\n'
                                    '{\n'
                                    '    vec2 uv = GetTransmittanceTextureUvFromRMu(atmosphere, r, mu);\n'
                                    '    return vec3(texture2D(transmittance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_d = ClampCosine((r * mu + d) / r_d);\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, -mu_d) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    '-mu),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        return min(\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu) /\n'
                                    '            GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, '
                                    'r_d, mu_d),\n'
                                    '            vec3(1.0));\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetTransmittanceToSun(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float sin_theta_h = atmosphere.bottom_radius / r;\n'
                                    '    float cos_theta_h = -sqrt(max(1.0 - sin_theta_h * sin_theta_h, 0.0));\n'
                                    '    return GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) *\n'
                                    '      smoothstep(-sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 sin_theta_h * atmosphere.sun_angular_radius,\n'
                                    '                 mu_s - cos_theta_h);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringIntegrand(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    float d,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    float r_d = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);\n'
                                    '    vec3 transmittance =\n'
                                    '        GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r_d, mu_s_d);\n'
                                    '    rayleigh = transmittance * GetProfileDensity(atmosphere.rayleigh_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mie = transmittance * GetProfileDensity(atmosphere.mie_density, r_d - '
                                    'atmosphere.bottom_radius);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float DistanceToNearestAtmosphereBoundary(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        return DistanceToBottomAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '    }\n'
                                    '    return DistanceToTopAtmosphereBoundary(atmosphere, r, mu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 rayleigh,\n'
                                    '    out vec3 mie)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 rayleigh_sum = vec3(0.0);\n'
                                    '    vec3 mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        vec3 rayleigh_i;\n'
                                    '        vec3 mie_i;\n'
                                    '        ComputeSingleScatteringIntegrand(\n'
                                    '            atmosphere, transmittance_texture, r, mu, mu_s, nu, d_i, '
                                    'ray_r_mu_intersects_ground, rayleigh_i, mie_i);\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_sum += rayleigh_i * weight_i;\n'
                                    '        mie_sum += mie_i * weight_i;\n'
                                    '    }\n'
                                    '    rayleigh = rayleigh_sum * dx * atmosphere.solar_irradiance * '
                                    'atmosphere.rayleigh_scattering;\n'
                                    '    mie = mie_sum * dx * atmosphere.solar_irradiance * atmosphere.mie_scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float RayleighPhaseFunction(float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (16.0 * PI);\n'
                                    '    return k * (1.0 + nu * nu);\n'
                                    '}\n'
                                    '\n'
                                    'float MiePhaseFunction(float g, float nu)\n'
                                    '{\n'
                                    '    float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);\n'
                                    '    return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec4 GetScatteringTextureUvwzFromRMuMuSNu(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float r,\n'
                                    '    float mu,\n'
                                    '    float mu_s,\n'
                                    '    float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = SafeSqrt(r * r - atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float u_r = GetTextureCoordFromUnitRange(rho / H, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float r_mu = r * mu;\n'
                                    '    float discriminant = r_mu * r_mu - r * r + atmosphere.bottom_radius * '
                                    'atmosphere.bottom_radius;\n'
                                    '    float u_mu;\n'
                                    '    if (ray_r_mu_intersects_ground)\n'
                                    '    {\n'
                                    '        float d = -r_mu - SafeSqrt(discriminant);\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        u_mu = 0.5 - 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            d_max == d_min ? 0.0 : (d - d_min) / (d_max - d_min), '
                                    'SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = -r_mu + SafeSqrt(discriminant + H * H);\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        u_mu = 0.5 + 0.5 * GetTextureCoordFromUnitRange(\n'
                                    '            (d - d_min) / (d_max - d_min), SCATTERING_TEXTURE_MU_SIZE / 2);\n'
                                    '    }\n'
                                    '\n'
                                    '    float d = DistanceToTopAtmosphereBoundary(atmosphere, atmosphere.bottom_radius, '
                                    'mu_s);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float a = (d - d_min) / (d_max - d_min);\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0 - a / A, 0.0) / (1.0 + a), '
                                    'SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float u_nu = (nu + 1.0) / 2.0;\n'
                                    '    return vec4(u_nu, u_mu_s, u_mu, u_r);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureUvwz(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec4 uvwz,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    float H = sqrt(atmosphere.top_radius * atmosphere.top_radius - '
                                    'atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    float rho = H * GetUnitRangeFromTextureCoord(uvwz.w, SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);\n'
                                    '    if (uvwz.z < 0.5)\n'
                                    '    {\n'
                                    '        float d_min = r - atmosphere.bottom_radius;\n'
                                    '        float d_max = rho;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(1.0 - 2.0 * uvwz.z, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? -1.0 : ClampCosine(-(rho * rho + d * d) / (2.0 * r * d));\n'
                                    '        ray_r_mu_intersects_ground = true;\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d_min = atmosphere.top_radius - r;\n'
                                    '        float d_max = rho + H;\n'
                                    '        float d = d_min + (d_max - d_min) *\n'
                                    '            GetUnitRangeFromTextureCoord(2.0 * uvwz.z - 1.0, SCATTERING_TEXTURE_MU_SIZE / '
                                    '2);\n'
                                    '        mu = (d == 0.0) ? 1.0 : ClampCosine((H * H - rho * rho - d * d) / (2.0 * r * '
                                    'd));\n'
                                    '        ray_r_mu_intersects_ground = false;\n'
                                    '    }\n'
                                    '\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uvwz.y, SCATTERING_TEXTURE_MU_S_SIZE);\n'
                                    '    float d_min = atmosphere.top_radius - atmosphere.bottom_radius;\n'
                                    '    float d_max = H;\n'
                                    '    float A = -2.0 * atmosphere.mu_s_min * atmosphere.bottom_radius / (d_max - d_min);\n'
                                    '    float a = (A - x_mu_s * A) / (1.0 + x_mu_s * A);\n'
                                    '    float d = d_min + min(a, A) * (d_max - d_min);\n'
                                    '    mu_s = (d == 0.0) ? 1.0 : ClampCosine((H * H - d * d) / (2.0 * '
                                    'atmosphere.bottom_radius * d));\n'
                                    '    nu = ClampCosine(uvwz.x * 2.0 - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuMuSNuFromScatteringTextureFragCoord(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out float r,\n'
                                    '    out float mu,\n'
                                    '    out float mu_s,\n'
                                    '    out float nu,\n'
                                    '    out bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const vec4 SCATTERING_TEXTURE_SIZE = vec4(\n'
                                    '        SCATTERING_TEXTURE_NU_SIZE - 1,\n'
                                    '        SCATTERING_TEXTURE_MU_S_SIZE,\n'
                                    '        SCATTERING_TEXTURE_MU_SIZE,\n'
                                    '        SCATTERING_TEXTURE_R_SIZE);\n'
                                    '    float frag_coord_nu = floor(gl_frag_coord.x / float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    float frag_coord_mu_s = mod(gl_frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));\n'
                                    '    vec4 uvwz = vec4(frag_coord_nu, frag_coord_mu_s, gl_frag_coord.y, gl_frag_coord.z) / '
                                    'SCATTERING_TEXTURE_SIZE;\n'
                                    '    GetRMuMuSNuFromScatteringTextureUvwz(atmosphere, uvwz, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    nu = clamp(\n'
                                    '        nu,\n'
                                    '        mu * mu_s - sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)),\n'
                                    '        mu * mu_s + sqrt((1.0 - mu * mu) * (1.0 - mu_s * mu_s)));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void ComputeSingleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec3 gl_frag_coord,\n'
                                    '    out vec3 rayleigh, out vec3 mie)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground);\n'
                                    '    ComputeSingleScattering(atmosphere, transmittance_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    return vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    if (scattering_order == 1)\n'
                                    '    {\n'
                                    '        vec3 rayleigh = GetScattering(\n'
                                    '            atmosphere, single_rayleigh_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '        vec3 mie = GetScattering(\n'
                                    '            atmosphere, single_mie_scattering_texture, r, mu, mu_s, nu,\n'
                                    '            ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '        return rayleigh * RayleighPhaseFunction(nu) + mie * '
                                    'MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '    }\n'
                                    '\n'
                                    '    return GetScattering(atmosphere, multiple_scattering_texture, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu_s);\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensity(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r, float mu, float mu_s, float nu, int scattering_order)\n'
                                    '{\n'
                                    '    vec3 zenith_direction = vec3(0.0, 0.0, 1.0);\n'
                                    '    vec3 omega = vec3(sqrt(1.0 - mu * mu), 0.0, mu);\n'
                                    '    float sun_dir_x = omega.x == 0.0 ? 0.0 : (nu - mu * mu_s) / omega.x;\n'
                                    '    float sun_dir_y = sqrt(max(1.0 - sun_dir_x * sun_dir_x - mu_s * mu_s, 0.0));\n'
                                    '    vec3 omega_s = vec3(sun_dir_x, sun_dir_y, mu_s);\n'
                                    '\n'
                                    '    const int SAMPLE_COUNT = 16;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie = vec3(0.0);\n'
                                    '\n'
                                    '    for (int l = 0; l < SAMPLE_COUNT; ++l)\n'
                                    '    {\n'
                                    '        float theta = (float(l) + 0.5) * dtheta;\n'
                                    '        float cos_theta = cos(theta);\n'
                                    '        float sin_theta = sin(theta);\n'
                                    '        bool ray_r_theta_intersects_ground = RayIntersectsGround(atmosphere, r, '
                                    'cos_theta);\n'
                                    '\n'
                                    '        float distance_to_ground = 0.0;\n'
                                    '        vec3 transmittance_to_ground = vec3(0.0);\n'
                                    '        vec3 ground_albedo = vec3(0.0);\n'
                                    '        if (ray_r_theta_intersects_ground)\n'
                                    '        {\n'
                                    '            distance_to_ground = DistanceToBottomAtmosphereBoundary(atmosphere, r, '
                                    'cos_theta);\n'
                                    '            transmittance_to_ground = GetTransmittance(atmosphere, transmittance_texture, '
                                    'r, cos_theta, distance_to_ground, true );\n'
                                    '            ground_albedo = atmosphere.ground_albedo;\n'
                                    '        }\n'
                                    '\n'
                                    '        for (int m = 0; m < 2 * SAMPLE_COUNT; ++m)\n'
                                    '        {\n'
                                    '            float phi = 1.5 * dphi;\n'
                                    '            vec3 omega_i = vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);\n'
                                    '            float domega_i = dtheta * dphi * sin(theta);\n'
                                    '\n'
                                    '            float nu1 = dot(omega_s, omega_i);\n'
                                    '            vec3 incident_radiance = GetScattering(atmosphere,\n'
                                    '                single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture, r, omega_i.z, mu_s, nu1,\n'
                                    '                ray_r_theta_intersects_ground, scattering_order - 1);\n'
                                    '\n'
                                    '            vec3 ground_normal = normalize(zenith_direction * r + omega_i * '
                                    'distance_to_ground);\n'
                                    '            vec3 ground_irradiance = GetIrradiance(\n'
                                    '                atmosphere, irradiance_texture, atmosphere.bottom_radius,\n'
                                    '                dot(ground_normal, omega_s));\n'
                                    '            incident_radiance += transmittance_to_ground * ground_albedo * (1.0 / (PI)) * '
                                    'ground_irradiance;\n'
                                    '\n'
                                    '            float nu2 = dot(omega, omega_i);\n'
                                    '            float rayleigh_density = GetProfileDensity(\n'
                                    '                atmosphere.rayleigh_density, r - atmosphere.bottom_radius);\n'
                                    '            float mie_density = GetProfileDensity(\n'
                                    '                atmosphere.mie_density, r - atmosphere.bottom_radius);\n'
                                    '            rayleigh_mie += incident_radiance *\n'
                                    '                (atmosphere.rayleigh_scattering * rayleigh_density * '
                                    'RayleighPhaseFunction(nu2) +\n'
                                    '                atmosphere.mie_scattering * mie_density *\n'
                                    '                MiePhaseFunction(atmosphere.mie_phase_function_g, nu2)) * domega_i;\n'
                                    '        }\n'
                                    '    }\n'
                                    '    return rayleigh_mie;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 50;\n'
                                    '    float dx = DistanceToNearestAtmosphereBoundary(atmosphere, r, mu, '
                                    'ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);\n'
                                    '    vec3 rayleigh_mie_sum = vec3(0.0);\n'
                                    '    for (int i = 0; i <= SAMPLE_COUNT; ++i)\n'
                                    '    {\n'
                                    '        float d_i = float(i) * dx;\n'
                                    '        float r_i = ClampRadius(atmosphere, sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * '
                                    'r));\n'
                                    '        float mu_i = ClampCosine((r * mu + d_i) / r_i);\n'
                                    '        float mu_s_i = ClampCosine((r * mu_s + d_i * nu) / r_i);\n'
                                    '        vec3 rayleigh_mie_i =\n'
                                    '            GetScattering(atmosphere, scattering_density_texture, r_i, mu_i, mu_s_i, nu, '
                                    'ray_r_mu_intersects_ground) *\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, d_i, '
                                    'ray_r_mu_intersects_ground) * dx;\n'
                                    '        float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;\n'
                                    '        rayleigh_mie_sum += rayleigh_mie_i * weight_i;\n'
                                    '    }\n'
                                    '    return rayleigh_mie_sum;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeScatteringDensitytexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    float nu;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeScatteringDensity(atmosphere, transmittance_texture,\n'
                                    '        single_rayleigh_scattering_texture, single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, irradiance_texture, r, mu, mu_s, nu,\n'
                                    '        scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeMultipleScatteringtexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_density_texture,\n'
                                    '    const in vec3 gl_frag_coord, out float nu)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu;\n'
                                    '    float mu_s;\n'
                                    '    bool ray_r_mu_intersects_ground;\n'
                                    '    GetRMuMuSNuFromScatteringTextureFragCoord(atmosphere, gl_frag_coord, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    return ComputeMultipleScattering(atmosphere, transmittance_texture,\n'
                                    '        scattering_density_texture, r, mu, mu_s, nu,\n'
                                    '        ray_r_mu_intersects_ground);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    float alpha_s = atmosphere.sun_angular_radius;\n'
                                    '    float average_cosine_factor = 0.0;\n'
                                    '    if(-alpha_s <= mu_s)\n'
                                    '    {\n'
                                    '        if(mu_s <= alpha_s)\n'
                                    '        {\n'
                                    '            average_cosine_factor = (mu_s + alpha_s) * (mu_s + alpha_s) / (4.0 * '
                                    'alpha_s);\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            average_cosine_factor = mu_s;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToTopAtmosphereBoundary(atmosphere, transmittance_texture, r, '
                                    'mu_s) * average_cosine_factor;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s,\n'
                                    '    int scattering_order)\n'
                                    '{\n'
                                    '    const int SAMPLE_COUNT = 32;\n'
                                    '    const float dphi = PI / float(SAMPLE_COUNT);\n'
                                    '    const float dtheta = PI / float(SAMPLE_COUNT);\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0);\n'
                                    '    vec3 omega_s = vec3(sqrt(1.0 - mu_s * mu_s), 0.0, mu_s);\n'
                                    '    for (int j = 0; j < SAMPLE_COUNT / 2; ++j)\n'
                                    '    {\n'
                                    '        float theta = (float(j) + 0.5) * dtheta;\n'
                                    '        for (int i = 0; i < 2 * SAMPLE_COUNT; ++i)\n'
                                    '        {\n'
                                    '            float phi = (float(i) + 0.5) * dphi;\n'
                                    '            vec3 omega = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n'
                                    '            float domega = dtheta * dphi * sin(theta);\n'
                                    '            float nu = dot(omega, omega_s);\n'
                                    '            result += GetScattering(\n'
                                    '                atmosphere,\n'
                                    '                single_rayleigh_scattering_texture,\n'
                                    '                single_mie_scattering_texture,\n'
                                    '                multiple_scattering_texture,\n'
                                    '                r, omega.z, mu_s, nu, false, scattering_order) * omega.z * domega;\n'
                                    '        }\n'
                                    '    }\n'
                                    '  return result;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec2 GetIrradianceTextureUvFromRMuS(const in AtmosphereParameters atmosphere, float r, '
                                    'float mu_s)\n'
                                    '{\n'
                                    '    float x_r = (r - atmosphere.bottom_radius) / (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    float x_mu_s = mu_s * 0.5 + 0.5;\n'
                                    '    return vec2(GetTextureCoordFromUnitRange(x_mu_s, IRRADIANCE_TEXTURE_WIDTH),\n'
                                    '                GetTextureCoordFromUnitRange(x_r, IRRADIANCE_TEXTURE_HEIGHT));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetRMuSFromIrradianceTextureUv(const in AtmosphereParameters atmosphere,\n'
                                    '    const in vec2 uv, out float r, out float mu_s)\n'
                                    '{\n'
                                    '    float x_mu_s = GetUnitRangeFromTextureCoord(uv.x, IRRADIANCE_TEXTURE_WIDTH);\n'
                                    '    float x_r = GetUnitRangeFromTextureCoord(uv.y, IRRADIANCE_TEXTURE_HEIGHT);\n'
                                    '    r = atmosphere.bottom_radius + x_r * (atmosphere.top_radius - '
                                    'atmosphere.bottom_radius);\n'
                                    '    mu_s = ClampCosine(2.0 * x_mu_s - 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeDirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in vec2 gl_frag_coord)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeDirectIrradiance(atmosphere, transmittance_texture, r, mu_s);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeIndirectIrradiancetexture2D(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D single_rayleigh_scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    const in sampler3D multiple_scattering_texture,\n'
                                    '    const in vec2 gl_frag_coord, int scattering_order)\n'
                                    '{\n'
                                    '    float r;\n'
                                    '    float mu_s;\n'
                                    '    GetRMuSFromIrradianceTextureUv(atmosphere, gl_frag_coord / IRRADIANCE_TEXTURE_SIZE, '
                                    'r, mu_s);\n'
                                    '    return ComputeIndirectIrradiance(atmosphere, single_rayleigh_scattering_texture, '
                                    'single_mie_scattering_texture,\n'
                                    '        multiple_scattering_texture, r, mu_s, scattering_order);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    float r,\n'
                                    '    float mu_s)\n'
                                    '{\n'
                                    '    vec2 uv = GetIrradianceTextureUvFromRMuS(atmosphere, r, mu_s);\n'
                                    '    return vec3(texture2D(irradiance_texture, uv));\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetCombinedScattering(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    float r, float mu, float mu_s, float nu,\n'
                                    '    bool ray_r_mu_intersects_ground,\n'
                                    '    out vec3 single_mie_scattering)\n'
                                    '{\n'
                                    '    vec4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(atmosphere, r, mu, mu_s, nu, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '    float tex_coord_x = uvwz.x * float(SCATTERING_TEXTURE_NU_SIZE - 1);\n'
                                    '    float tex_x = floor(tex_coord_x);\n'
                                    '    float lerp = tex_coord_x - tex_x;\n'
                                    '    vec3 uvw0 = vec3((tex_x + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '    vec3 uvw1 = vec3((tex_x + 1.0 + uvwz.y) / float(SCATTERING_TEXTURE_NU_SIZE), uvwz.z, '
                                    'uvwz.w);\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#else\n'
                                    '    vec3 scattering = vec3(\n'
                                    '        texture3D(scattering_texture, uvw0) * (1.0 - lerp) + '
                                    'texture3D(scattering_texture, uvw1) * lerp);\n'
                                    '    single_mie_scattering = vec3(\n'
                                    '        texture3D(single_mie_scattering_texture, uvw0) * (1.0 - lerp) +\n'
                                    '        texture3D(single_mie_scattering_texture, uvw1) * lerp);\n'
                                    '#endif\n'
                                    '    return scattering;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 view_ray, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary = -rmu -\n'
                                    '        sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '    else if(r > atmosphere.top_radius)\n'
                                    '    {\n'
                                    '        transmittance = vec3(1.0);\n'
                                    '        return vec3(0.0);\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = ray_r_mu_intersects_ground ?\n'
                                    '        vec3(0.0) : GetTransmittanceToTopAtmosphereBoundary(atmosphere, '
                                    'transmittance_texture, r, mu);\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering;\n'
                                    '    if (shadow_length == 0.0)\n'
                                    '    {\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r, mu, mu_s, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        float d = shadow_length;\n'
                                    '        float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '        float mu_p = (r * mu + d) / r_p;\n'
                                    '        float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '        scattering = GetCombinedScattering(\n'
                                    '            atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '            r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground, single_mie_scattering);\n'
                                    '        vec3 shadow_transmittance =\n'
                                    '            GetTransmittance(atmosphere, transmittance_texture, r, mu, shadow_length, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '        scattering = scattering * shadow_transmittance;\n'
                                    '        single_mie_scattering = single_mie_scattering * shadow_transmittance;\n'
                                    '    }\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 ComputeSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler3D scattering_texture,\n'
                                    '    const in sampler3D single_mie_scattering_texture,\n'
                                    '    vec3 camera, const in vec3 point, float shadow_length,\n'
                                    '    const in vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    vec3 view_ray = normalize(point - camera);\n'
                                    '    float r = length(camera);\n'
                                    '    float rmu = dot(camera, view_ray);\n'
                                    '    float distance_to_top_atmosphere_boundary =\n'
                                    '        -rmu - sqrt(rmu * rmu - r * r + atmosphere.top_radius * atmosphere.top_radius);\n'
                                    '\n'
                                    '    if (distance_to_top_atmosphere_boundary > 0.0)\n'
                                    '    {\n'
                                    '        camera = camera + view_ray * distance_to_top_atmosphere_boundary;\n'
                                    '        r = atmosphere.top_radius;\n'
                                    '        rmu += distance_to_top_atmosphere_boundary;\n'
                                    '    }\n'
                                    '\n'
                                    '    float mu = rmu / r;\n'
                                    '    float mu_s = dot(camera, sun_direction) / r;\n'
                                    '    float nu = dot(view_ray, sun_direction);\n'
                                    '    float d = length(point - camera);\n'
                                    '    bool ray_r_mu_intersects_ground = RayIntersectsGround(atmosphere, r, mu);\n'
                                    '\n'
                                    '    transmittance = GetTransmittance(atmosphere, transmittance_texture, r, mu, d, '
                                    'ray_r_mu_intersects_ground);\n'
                                    '\n'
                                    '    vec3 single_mie_scattering;\n'
                                    '    vec3 scattering = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r, mu, mu_s, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering);\n'
                                    '\n'
                                    '    d = max(d - shadow_length, 0.0);\n'
                                    '    float r_p = ClampRadius(atmosphere, sqrt(d * d + 2.0 * r * mu * d + r * r));\n'
                                    '    float mu_p = (r * mu + d) / r_p;\n'
                                    '    float mu_s_p = (r * mu_s + d * nu) / r_p;\n'
                                    '\n'
                                    '    vec3 single_mie_scattering_p;\n'
                                    '    vec3 scattering_p = GetCombinedScattering(\n'
                                    '        atmosphere, scattering_texture, single_mie_scattering_texture,\n'
                                    '        r_p, mu_p, mu_s_p, nu, ray_r_mu_intersects_ground,\n'
                                    '        single_mie_scattering_p);\n'
                                    '\n'
                                    '    vec3 shadow_transmittance = transmittance;\n'
                                    '    if (shadow_length > 0.0)\n'
                                    '    {\n'
                                    '        shadow_transmittance = GetTransmittance(\n'
                                    '            atmosphere, transmittance_texture, r, mu, d, ray_r_mu_intersects_ground);\n'
                                    '    }\n'
                                    '    scattering = scattering - shadow_transmittance * scattering_p;\n'
                                    '    single_mie_scattering = single_mie_scattering - shadow_transmittance * '
                                    'single_mie_scattering_p;\n'
                                    '#if COMBINED_SCATTERING_TEXTURES == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '    single_mie_scattering = single_mie_scattering * smoothstep(0.0, float(0.01), mu_s);\n'
                                    '\n'
                                    '    return scattering * RayleighPhaseFunction(nu) + single_mie_scattering *\n'
                                    '        MiePhaseFunction(atmosphere.mie_phase_function_g, nu);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 ComputeSunAndSkyIrradiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    const in sampler2D transmittance_texture,\n'
                                    '    const in sampler2D irradiance_texture,\n'
                                    '    const in vec3 point, const in vec3 normal, const in vec3 sun_direction,\n'
                                    '    out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    float r = length(point);\n'
                                    '    float mu_s = dot(point, sun_direction) / r;\n'
                                    '\n'
                                    '    sky_irradiance = GetIrradiance(atmosphere, irradiance_texture, r, mu_s) * (1.0 + '
                                    'dot(normal, point) / r) * 0.5;\n'
                                    '\n'
                                    '    return atmosphere.solar_irradiance *\n'
                                    '        GetTransmittanceToSun(atmosphere, transmittance_texture, r, mu_s) *\n'
                                    '        max(dot(normal, sun_direction), 0.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 GetSolarRadiance(const in AtmosphereParameters atmosphere)\n'
                                    '{\n'
                                    '    return atmosphere.solar_irradiance /\n'
                                    '        (PI * atmosphere.sun_angular_radius * atmosphere.sun_angular_radius) * '
                                    'SUN_RADIANCE_TO_LUMINANCE * atmosphere_exposure;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 view_ray, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadiance(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, view_ray, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSkyRadianceToPoint(\n'
                                    '    const in AtmosphereParameters atmosphere, vec3 camera, vec3 point, float '
                                    'shadow_length,\n'
                                    '    vec3 sun_direction, out vec3 transmittance)\n'
                                    '{\n'
                                    '    return ComputeSkyRadianceToPoint(atmosphere, transmittance_texture,\n'
                                    '        scattering_texture, single_mie_scattering_texture,\n'
                                    '        camera, point, shadow_length, sun_direction, transmittance) * '
                                    'SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 GetSunAndSkyIrradiance(\n'
                                    '   const in AtmosphereParameters atmosphere, vec3 p, vec3 normal, vec3 sun_direction,\n'
                                    '   out vec3 sky_irradiance)\n'
                                    '{\n'
                                    '    vec3 sun_irradiance = ComputeSunAndSkyIrradiance(\n'
                                    '        atmosphere, transmittance_texture, irradiance_texture, p, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '    sky_irradiance *= SKY_RADIANCE_TO_LUMINANCE;\n'
                                    '    return sun_irradiance * SUN_RADIANCE_TO_LUMINANCE;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSunVisibility(vec3 point, vec3 sun_direction)\n'
                                    '{\n'
                                    '    vec3 p = point - kSphereCenter;\n'
                                    '    float p_dot_v = dot(p, sun_direction);\n'
                                    '    float p_dot_p = dot(p, p);\n'
                                    '    float ray_sphere_center_squared_distance = p_dot_p - p_dot_v * p_dot_v;\n'
                                    '    float distance_to_intersection = -p_dot_v - sqrt(\n'
                                    '        kSphereRadius * kSphereRadius - ray_sphere_center_squared_distance);\n'
                                    '    if (distance_to_intersection > 0.0)\n'
                                    '    {\n'
                                    '        float ray_sphere_distance = kSphereRadius - '
                                    'sqrt(ray_sphere_center_squared_distance);\n'
                                    '        float ray_sphere_angular_distance = -ray_sphere_distance / p_dot_v;\n'
                                    '        return smoothstep(1.0, 0.0, ray_sphere_angular_distance / sun_size.x);\n'
                                    '    }\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float GetSkyVisibility(vec3 point)\n'
                                    '{\n'
                                    '  vec3 p = point - kSphereCenter;\n'
                                    '  float p_dot_p = dot(p, p);\n'
                                    '  return 1.0 + p.y / sqrt(p_dot_p) * kSphereRadius * kSphereRadius / p_dot_p;\n'
                                    '}\n'
                                    '\n'
                                    'void GetSphereShadowInOut(vec3 view_direction, vec3 sun_direction, out float d_in, out '
                                    'float d_out)\n'
                                    '{\n'
                                    '    vec3 pos = CAMERA_POSITION.xyz * atmosphere_ratio - kSphereCenter;\n'
                                    '    float pos_dot_sun = dot(pos, sun_direction);\n'
                                    '    float view_dot_sun = dot(view_direction, sun_direction);\n'
                                    '    float k = sun_size.x;\n'
                                    '    float l = 1.0 + k * k;\n'
                                    '    float a = 1.0 - l * view_dot_sun * view_dot_sun;\n'
                                    '    float b = dot(pos, view_direction) - l * pos_dot_sun * view_dot_sun - k * '
                                    'kSphereRadius * view_dot_sun;\n'
                                    '    float c = dot(pos, pos) - l * pos_dot_sun * pos_dot_sun -\n'
                                    '        2.0 * k * kSphereRadius * pos_dot_sun - kSphereRadius * kSphereRadius;\n'
                                    '    float discriminant = b * b - a * c;\n'
                                    '    if (discriminant > 0.0)\n'
                                    '    {\n'
                                    '        d_in = max(0.0, (-b - sqrt(discriminant)) / a);\n'
                                    '        d_out = (-b + sqrt(discriminant)) / a;\n'
                                    '        float d_base = -pos_dot_sun / view_dot_sun;\n'
                                    '        float d_apex = -(pos_dot_sun + kSphereRadius / k) / view_dot_sun;\n'
                                    '        if (view_dot_sun > 0.0)\n'
                                    '        {\n'
                                    '            d_in = max(d_in, d_apex);\n'
                                    '            d_out = a > 0.0 ? min(d_out, d_base) : d_base;\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            d_in = a > 0.0 ? max(d_in, d_base) : d_base;\n'
                                    '            d_out = min(d_out, d_apex);\n'
                                    '        }\n'
                                    '    }\n'
                                    '    else\n'
                                    '    {\n'
                                    '        d_in = 0.0;\n'
                                    '        d_out = 0.0;\n'
                                    '    }\n'
                                    '}\n'
                                    '\n'
                                    'float GetSceneShadowLength(float scene_dist, vec3 view_direction, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    const float earth_radius = abs(earth_center.y);\n'
                                    '    bool shadow_enter = false;\n'
                                    '    bool do_exit = false;\n'
                                    '    float scene_shadow_out = 0.0;\n'
                                    '    float scene_shadow_in = 0.0;\n'
                                    '    float shadow_length = 0.0;\n'
                                    '    const int LOOP = 64;\n'
                                    '    float d = min(NEAR_FAR.y * 0.01, scene_dist) / float(LOOP);\n'
                                    '    float enter_count = 0.0;\n'
                                    '\n'
                                    '    for(int i=0; i<LOOP; ++i)\n'
                                    '    {\n'
                                    '        float ray_dist = float(i) * d;\n'
                                    '        vec3 world_pos = CAMERA_POSITION.xyz + view_direction * ray_dist;\n'
                                    '        vec4 shadow_uv = SHADOW_MATRIX * vec4(world_pos, 1.0);\n'
                                    '        shadow_uv.xyz /= shadow_uv.w;\n'
                                    '        shadow_uv.xyz = shadow_uv.xyz * 0.5 + 0.5;\n'
                                    '        float shadow_depth = texture2D(texture_shadow, shadow_uv.xy, 0).x;\n'
                                    '\n'
                                    '        if(shadow_uv.x < 0.0 || 1.0 < shadow_uv.x || shadow_uv.y < 0.0 || 1.0 < '
                                    'shadow_uv.y || scene_dist <= ray_dist)\n'
                                    '        {\n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(length(world_pos - earth_center) < earth_radius)\n'
                                    '        {\n'
                                    '            \n'
                                    '            do_exit = true;\n'
                                    '        }\n'
                                    '        else if(false == shadow_enter && shadow_depth <= shadow_uv.z)\n'
                                    '        {\n'
                                    '            \n'
                                    '            shadow_enter = true;\n'
                                    '            scene_shadow_in = dot(view_direction, world_pos);\n'
                                    '        }\n'
                                    '        else if(shadow_enter && shadow_uv.z < shadow_depth)\n'
                                    '        {\n'
                                    '            \n'
                                    '            scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '            shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '\n'
                                    '            \n'
                                    '            shadow_enter = false;\n'
                                    '            scene_shadow_in = 0.0;\n'
                                    '            scene_shadow_out = 0.0;\n'
                                    '            continue;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(shadow_enter)\n'
                                    '        {\n'
                                    '            enter_count += 1.0;\n'
                                    '        }\n'
                                    '\n'
                                    '        if(do_exit || i == (LOOP-1))\n'
                                    '        {\n'
                                    '            if(shadow_enter)\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_out = dot(view_direction, world_pos);\n'
                                    '                shadow_length += scene_shadow_out - scene_shadow_in;\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                \n'
                                    '                scene_shadow_in = 0.0;\n'
                                    '                scene_shadow_out = 0.0;\n'
                                    '            }\n'
                                    '            break;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_length = enter_count / float(LOOP);\n'
                                    '\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, '
                                    'dot(normalize(relative_camera_pos - earth_center), sun_direction));\n'
                                    '\n'
                                    '    return max(0.0, shadow_length) * lightshaft_fadein_hack * 2.0;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    \n'
                                    '    float scene_shadow_length = 0.0;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetSceneRadianceWithShadow(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float scene_linear_depth, vec3 eye_direction, vec3 normal, sampler2D texture_shadow,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 in_scatter, out float '
                                    'scene_shadow_length)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 relative_camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 relative_point = relative_camera_pos + eye_direction * scene_linear_depth * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    \n'
                                    '    relative_camera_pos.y = max(0.0, relative_camera_pos.y);\n'
                                    '    relative_point.y = max(0.0, relative_point.y);\n'
                                    '\n'
                                    '    scene_shadow_length = GetSceneShadowLength(scene_linear_depth, eye_direction, '
                                    'texture_shadow);\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '            atmosphere, relative_point.xyz - earth_center, normal, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    in_scatter = GetSkyRadianceToPoint(atmosphere, relative_camera_pos - earth_center,\n'
                                    '        relative_point.xyz - earth_center, scene_shadow_length, sun_direction, '
                                    'transmittance);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'void GetCloudRadiance(\n'
                                    '    const in AtmosphereParameters atmosphere,\n'
                                    '    float dist, vec3 eye_direction, float scene_shadow_length,\n'
                                    '    out vec3 sun_irradiance, out vec3 sky_irradiance, out vec3 inscatter)\n'
                                    '{\n'
                                    '    vec3 sun_direction = LIGHT_DIRECTION.xyz;\n'
                                    '    vec3 camera_pos = CAMERA_POSITION.xyz * atmosphere_ratio;\n'
                                    '    vec3 point = camera_pos + eye_direction.xyz * max(NEAR_FAR.x, dist) * '
                                    'atmosphere_ratio;\n'
                                    '\n'
                                    '    sun_irradiance = GetSunAndSkyIrradiance(\n'
                                    '        atmosphere, point.xyz - earth_center, sun_direction, sun_direction, '
                                    'sky_irradiance);\n'
                                    '\n'
                                    '    vec3 transmittance;\n'
                                    '    inscatter = GetSkyRadianceToPoint(atmosphere, camera_pos - earth_center,\n'
                                    '        point.xyz - earth_center, scene_shadow_length, sun_direction, transmittance);\n'
                                    '\n'
                                    '    sun_irradiance = max(vec3(0.0), sun_irradiance);\n'
                                    '    sky_irradiance = max(vec3(0.0), sky_irradiance);\n'
                                    '    transmittance = max(vec3(0.0), transmittance);\n'
                                    '    inscatter = max(vec3(0.0), inscatter);\n'
                                    '\n'
                                    '    sun_irradiance *= transmittance / PI;\n'
                                    '    sky_irradiance *= transmittance / PI;\n'
                                    '}\n'
                                    '#endif /* UUID_cd06d49e_87b7_359c_aed9_48f39d158c76 */\n'
                                    '\n'
                                    'const AtmosphereParameters ATMOSPHERE = AtmosphereParameters(\n'
                                    'vec3(1.474000, 1.850400, 1.911980),\n'
                                    '0.004675,\n'
                                    '6361.0,\n'
                                    '6420.0,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.125000, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.005802, 0.013558, 0.033100),\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(0.000000, 0.000000, 0.000000, '
                                    '0.000000, 0.000000),DensityProfileLayer(0.000000, 1.000000, -0.833333, 0.000000, '
                                    '0.000000))),\n'
                                    'vec3(0.003996, 0.003996, 0.003996),\n'
                                    'vec3(0.004440, 0.004440, 0.004440),\n'
                                    '0.8,\n'
                                    'DensityProfile(DensityProfileLayer[2](DensityProfileLayer(25.000000, 0.000000, 0.000000, '
                                    '0.066667, -0.666667),DensityProfileLayer(0.000000, 0.000000, 0.000000, -0.066667, '
                                    '2.666667))),\n'
                                    'vec3(0.000650, 0.001881, 0.000085),\n'
                                    'vec3(0.100000, 0.100000, 0.100000),\n'
                                    '-0.4999999690599179);\n'
                                    '#endif /* UUID_7930fe11_5b93_388d_b01e_c1ba150d8083 */\n'
                                    '\n'
                                    '\n'
                                    'float get_shadow_factor_simple(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                    '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                    '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                    '    shadow_proj.xyz /= shadow_proj.w;\n'
                                    '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                    '    float shadow_depth = shadow_proj.z;\n'
                                    '    vec2 offsets[4] = {\n'
                                    '        vec2(0.0, 0.0),\n'
                                    '        vec2(shadow_texel_size.x, 0.0),\n'
                                    '        vec2(0.0, shadow_texel_size.y),\n'
                                    '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                    '    };\n'
                                    '\n'
                                    '    float shadow_factor = 0.0;\n'
                                    '    const float c = 1000.0;\n'
                                    '    float depth_bias = 0.002;\n'
                                    '\n'
                                    '    vec2 shadow_uv = shadow_proj.xy;\n'
                                    '\n'
                                    '    vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                    '    vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                    '    vec2 uv = pixel_pos * shadow_texel_size;\n'
                                    '\n'
                                    '    vec4 shadow_factors;\n'
                                    '\n'
                                    '    for(int i=0; i<4; ++i)\n'
                                    '    {\n'
                                    '        vec2 shadow_uv = uv + offsets[i];\n'
                                    '        shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                    '        if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && shadow_uv.y '
                                    '<= 1.0 && shadow_factors[i] < 1.0)\n'
                                    '        {\n'
                                    '            shadow_factors[i] = saturate(exp( -c * (shadow_depth - shadow_factors[i] + '
                                    'depth_bias)));\n'
                                    '        }\n'
                                    '        else\n'
                                    '        {\n'
                                    '            shadow_factors[i] = 1.0;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    shadow_factor += mix(\n'
                                    '        mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                    '        mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                    '\n'
                                    '    return clamp(shadow_factor, 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'float get_shadow_factor(vec2 screen_tex_coord, vec3 world_position, sampler2D '
                                    'texture_shadow)\n'
                                    '{\n'
                                    '    vec2 shadow_size = textureSize(texture_shadow, 0);\n'
                                    '    vec2 shadow_texel_size = 1.0 / shadow_size;\n'
                                    '    vec4 shadow_proj = SHADOW_MATRIX * vec4(world_position, 1.0);\n'
                                    '    shadow_proj.xyz /= shadow_proj.w;\n'
                                    '    shadow_proj.xyz = shadow_proj.xyz * 0.5 + 0.5;\n'
                                    '    float shadow_depth = shadow_proj.z;\n'
                                    '    vec2 offsets[4] = {\n'
                                    '        vec2(0.0, 0.0),\n'
                                    '        vec2(shadow_texel_size.x, 0.0),\n'
                                    '        vec2(0.0, shadow_texel_size.y),\n'
                                    '        vec2(shadow_texel_size.x, shadow_texel_size.y),\n'
                                    '    };\n'
                                    '\n'
                                    '    float shadow_factor = 0.0;\n'
                                    '    const float c = 1000.0;\n'
                                    '    float depth_bias = 0.002;\n'
                                    '\n'
                                    '    for(int n=0; n<SHADOWMAP_LOOP_COUNT; ++n)\n'
                                    '    {\n'
                                    '        vec2 shadow_uv = shadow_proj.xy + PoissonSamples[n] * shadow_texel_size * 4.0;\n'
                                    '\n'
                                    '        vec2 pixel_ratio = fract(shadow_uv.xy * shadow_size);\n'
                                    '        vec2 pixel_pos = shadow_uv.xy * shadow_size - pixel_ratio + 0.5;\n'
                                    '        vec2 uv = pixel_pos * shadow_texel_size;\n'
                                    '\n'
                                    '        vec4 shadow_factors;\n'
                                    '\n'
                                    '        for(int i=0; i<4; ++i)\n'
                                    '        {\n'
                                    '            vec2 shadow_uv = uv + offsets[i];\n'
                                    '            shadow_factors[i] = texture2DLod(texture_shadow, shadow_uv, 0.0).x;\n'
                                    '            if(0.0 <= shadow_uv.x && shadow_uv.x <= 1.0 && 0.0 <= shadow_uv.y && '
                                    'shadow_uv.y <= 1.0 && shadow_factors[i] < 1.0)\n'
                                    '            {\n'
                                    '                shadow_factors[i] = saturate(exp( -c * (shadow_depth - shadow_factors[i] '
                                    '+ depth_bias)));\n'
                                    '            }\n'
                                    '            else\n'
                                    '            {\n'
                                    '                shadow_factors[i] = 1.0;\n'
                                    '            }\n'
                                    '        }\n'
                                    '\n'
                                    '        shadow_factor += mix(\n'
                                    '            mix(shadow_factors.x, shadow_factors.y, pixel_ratio.x),\n'
                                    '            mix(shadow_factors.z, shadow_factors.w, pixel_ratio.x), pixel_ratio.y);\n'
                                    '    }\n'
                                    '\n'
                                    '    return clamp(shadow_factor / float(SHADOWMAP_LOOP_COUNT), 0.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 oren_nayar(float roughness2, float NdotL, float NdotV, vec3 N, vec3 V, vec3 L)\n'
                                    '{\n'
                                    '    float incidentTheta = acos(NdotL);\n'
                                    '    float outTheta = acos(NdotV);\n'
                                    '\n'
                                    '    float A = 1.0 - 0.5 * (roughness2 / (roughness2 + 0.33));\n'
                                    '    float B = (0.45 * roughness2) / (roughness2 + 0.09);\n'
                                    '    float alpha = max(incidentTheta, outTheta);\n'
                                    '    float beta  = min(incidentTheta, outTheta);\n'
                                    '\n'
                                    '    vec3 u = normalize(V - N * NdotV);\n'
                                    '    vec3 v = normalize(L - N * NdotL);\n'
                                    '    float phiDiff = max(0.0, dot(u, v));\n'
                                    '\n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    return vec3((A + (B * phiDiff * sin(alpha) * tan(beta))) * NdotL);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 fresnelSchlick(float cosTheta, vec3 F0)\n'
                                    '{\n'
                                    '    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)\n'
                                    '{\n'
                                    '    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\n'
                                    '}\n'
                                    '\n'
                                    'float D_blinn(float roughness, float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float n = 2.0 / m2 - 2.0;\n'
                                    '    return (n + 2.0) / (2.0 * PI) * pow(NdH, n);\n'
                                    '}\n'
                                    '\n'
                                    'float D_beckmann(float roughness, float NdH)\n'
                                    '{\n'
                                    '    float m = roughness * roughness;\n'
                                    '    float m2 = m * m;\n'
                                    '    float NdH2 = NdH * NdH;\n'
                                    '    return exp((NdH2 - 1.0) / (m2 * NdH2)) / (PI * m2 * NdH2 * NdH2);\n'
                                    '}\n'
                                    '\n'
                                    'float DistributionGGX(float NdH, float roughness)\n'
                                    '{\n'
                                    '    float a      = roughness * roughness;\n'
                                    '    float a2     = a * a;\n'
                                    '    float NdH2 = NdH * NdH;\n'
                                    '\n'
                                    '    float num   = a2;\n'
                                    '    float denom = (NdH2 * (a2 - 1.0) + 1.0);\n'
                                    '    denom = PI * denom * denom;\n'
                                    '\n'
                                    '    return num / denom;\n'
                                    '}\n'
                                    '\n'
                                    'float GeometrySchlickGGX(float NdV, float roughness)\n'
                                    '{\n'
                                    '    float r = (roughness + 1.0);\n'
                                    '    float k = (r * r) / 8.0;\n'
                                    '    float num   = NdV;\n'
                                    '    float denom = NdV * (1.0 - k) + k;\n'
                                    '    return num / denom;\n'
                                    '}\n'
                                    '\n'
                                    'float GeometrySmith(float NdV, float NdL, float roughness)\n'
                                    '{\n'
                                    '    float ggx2  = GeometrySchlickGGX(NdV, roughness);\n'
                                    '    float ggx1  = GeometrySchlickGGX(NdL, roughness);\n'
                                    '    return ggx1 * ggx2;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 phong_specular(in float LdR, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float spec = max(0.0, LdR);\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(spec, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    'vec3 blinn_specular(in float NdH, in vec3 specular, in float roughness)\n'
                                    '{\n'
                                    '    float k = 1.999 / (roughness * roughness);\n'
                                    '    return min(1.0, 3.0 * 0.0398 * k) * pow(NdH, min(10000.0, k)) * specular;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec3 cooktorrance_specular(vec3 F, float NdL, float NdV, float NdH, float roughness)\n'
                                    '{\n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '    \n'
                                    '\n'
                                    '    \n'
                                    '    float NDF = DistributionGGX(NdH, roughness);\n'
                                    '    float G   = GeometrySmith(NdV, NdL, roughness);\n'
                                    '    vec3 numerator    = NDF * G * F;\n'
                                    '    float denominator = 4.0 * NdV * NdL;\n'
                                    '    return numerator / max(denominator, 0.001);\n'
                                    '}\n'
                                    '\n'
                                    'vec2 env_BRDF_pproximate(float NdV, float roughness)\n'
                                    '{\n'
                                    '    \n'
                                    '    const vec4 c0 = vec4(-1.0, -0.0275, -0.572,  0.022);\n'
                                    '    const vec4 c1 = vec4( 1.0,  0.0425,  1.040, -0.040);\n'
                                    '    vec4 r = roughness * c0 + c1;\n'
                                    '    float a004 = min(r.x * r.x, exp2(-9.28 * NdV)) * r.x + r.y;\n'
                                    '    return vec2(-1.04, 1.04) * a004 + r.zw;\n'
                                    '}\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    'vec4 surface_shading(vec4 base_color,\n'
                                    '                    vec3 emissive_color,\n'
                                    '                    float metallic,\n'
                                    '                    float roughness,\n'
                                    '                    float reflectance,\n'
                                    '                    float ssao_factor,\n'
                                    '                    vec4 scene_reflect_color,\n'
                                    '                    samplerCube texture_probe,\n'
                                    '                    sampler2D texture_shadow,\n'
                                    '                    vec2 screen_tex_coord,\n'
                                    '                    vec3 world_position,\n'
                                    '                    vec3 light_color,\n'
                                    '                    vec3 N,\n'
                                    '                    vec3 V,\n'
                                    '                    vec3 L,\n'
                                    '                    float depth)\n'
                                    '{\n'
                                    '    \n'
                                    '    vec3 scene_in_scatter;\n'
                                    '    vec3 scene_sun_irradiance;\n'
                                    '    vec3 scene_sky_irradiance;\n'
                                    '    float scene_shadow_length;\n'
                                    '    float scene_linear_depth = depth_to_linear_depth(depth);\n'
                                    '    GetSceneRadiance(ATMOSPHERE, scene_linear_depth, -V, N, scene_sun_irradiance, '
                                    'scene_sky_irradiance, scene_in_scatter);\n'
                                    '\n'
                                    '    light_color = light_color * scene_sun_irradiance;\n'
                                    '\n'
                                    '    \n'
                                    '    roughness = clamp(roughness, 0.05, 1.0);\n'
                                    '\n'
                                    '    \n'
                                    '    vec3 R = reflect(-V, N);\n'
                                    '    vec3 H = normalize(V + L);\n'
                                    '\n'
                                    '    float NdL = dot(N, L);\n'
                                    '    NdL = max(0.0, NdL);\n'
                                    '\n'
                                    '    float NdV = max(0.001, dot(N, V));\n'
                                    '    float NdH = max(0.001, dot(N, H));\n'
                                    '    float HdV = max(0.001, dot(H, V));\n'
                                    '    float LdV = max(0.001, dot(L, V));\n'
                                    '\n'
                                    '    vec3 shadow_factor = vec3( get_shadow_factor(screen_tex_coord, world_position, '
                                    'texture_shadow) );\n'
                                    '    shadow_factor = max(shadow_factor, scene_sky_irradiance);\n'
                                    '\n'
                                    '    vec3 result = vec3(0.0, 0.0, 0.0);\n'
                                    '    float opacity = base_color.w;\n'
                                    '\n'
                                    '    vec3 F0 = vec3(0.04);\n'
                                    '    F0 = mix(max(F0, reflectance), base_color.xyz, metallic);\n'
                                    '    vec3 fresnel = fresnelSchlick(NdV, F0);\n'
                                    '\n'
                                    '    vec3 diffuse_light = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 specular_light = vec3(0.0, 0.0, 0.0);\n'
                                    '\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '\n'
                                    '    \n'
                                    '    {\n'
                                    '        vec3 light_fresnel = fresnelSchlick(HdV, F0);\n'
                                    '\n'
                                    '        \n'
                                    '        diffuse_light += oren_nayar(roughness, NdL, NdV, N, V, L) / PI * NdL * '
                                    'light_color * shadow_factor;\n'
                                    '        specular_light += cooktorrance_specular(light_fresnel, NdL, NdV, NdH, roughness) '
                                    '* NdL * light_color * shadow_factor;\n'
                                    '\n'
                                    '        \n'
                                    '        for(int i=0; i<MAX_POINT_LIGHTS; ++i)\n'
                                    '        {\n'
                                    '            if(1.0 != POINT_LIGHTS[i].render)\n'
                                    '            {\n'
                                    '                break;\n'
                                    '            }\n'
                                    '\n'
                                    '            float point_light_radius = POINT_LIGHTS[i].radius;\n'
                                    '            vec3 point_light_dir = POINT_LIGHTS[i].pos.xyz - world_position;\n'
                                    '            float point_light_dist = length(point_light_dir);\n'
                                    '\n'
                                    '            if(point_light_radius < point_light_dist)\n'
                                    '            {\n'
                                    '                continue;\n'
                                    '            }\n'
                                    '\n'
                                    '            point_light_dir /= point_light_dist;\n'
                                    '\n'
                                    '            vec3 point_light_half = normalize(V + point_light_dir);\n'
                                    '            float point_light_attenuation = clamp(1.0 - point_light_dist / '
                                    'point_light_radius, 0.0, 1.0);\n'
                                    '            point_light_attenuation *= point_light_attenuation;\n'
                                    '            vec3 point_light_color = POINT_LIGHTS[i].color.xyz * '
                                    'point_light_attenuation;\n'
                                    '\n'
                                    '            float point_light_NdL = max(0.01, dot(N, point_light_dir));\n'
                                    '            float point_light_NdH = max(0.01, dot(N, point_light_half));\n'
                                    '\n'
                                    '            diffuse_light += oren_nayar(roughness, point_light_NdL, NdV, N, V, '
                                    'point_light_dir) / PI * point_light_NdL * point_light_color;\n'
                                    '            specular_light += cooktorrance_specular(light_fresnel, point_light_NdL, NdV, '
                                    'point_light_NdH, roughness) * point_light_NdL * point_light_color;\n'
                                    '        }\n'
                                    '    }\n'
                                    '\n'
                                    '    \n'
                                    '    {\n'
                                    '        const vec2 env_size = textureSize(texture_probe, 0);\n'
                                    '        const float max_env_mipmap = 8.0; \n'
                                    '        vec2 envBRDF = clamp(env_BRDF_pproximate(NdV, roughness), 0.0, 1.0);\n'
                                    '        vec3 shValue = fresnel * envBRDF.x + envBRDF.y;\n'
                                    '\n'
                                    '        vec3 ibl_diffuse_light = textureCubeLod(texture_probe, invert_y(N), '
                                    'max_env_mipmap).xyz;\n'
                                    '        vec3 ibl_specular_light = textureCubeLod(texture_probe, invert_y(R), '
                                    'max_env_mipmap * roughness).xyz;\n'
                                    '\n'
                                    '        \n'
                                    '        if(RENDER_SSR)\n'
                                    '        {\n'
                                    '            \n'
                                    '            ibl_specular_light.xyz = mix(ibl_specular_light.xyz, scene_reflect_color.xyz, '
                                    'scene_reflect_color.w);\n'
                                    '        }\n'
                                    '\n'
                                    '        diffuse_light += ibl_diffuse_light * shValue * shadow_factor;\n'
                                    '        specular_light += ibl_specular_light * shValue * shadow_factor;\n'
                                    '    }\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '    \n'
                                    '    diffuse_light *= base_color.xyz * clamp((vec3(1.0) - fresnel) * (1.0 - metallic), '
                                    '0.0, 1.0);\n'
                                    '    specular_light = mix(specular_light, specular_light * base_color.xyz, '
                                    'vec3(metallic));\n'
                                    '\n'
                                    '    result = diffuse_light + specular_light;\n'
                                    '\n'
                                    '    \n'
                                    '    if(RENDER_SSAO)\n'
                                    '    {\n'
                                    '        result *= ssao_factor;\n'
                                    '    }\n'
                                    '\n'
                                    '    \n'
                                    '    result += emissive_color;\n'
                                    '\n'
                                    '    return vec4(max(vec3(0.0), result), opacity);\n'
                                    '}\n'
                                    '#endif /* UUID_3df145e6_b9f4_3971_ba3d_0eaabecd4d8d */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "default_vs.glsl"\n'
                                    '#ifndef UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52\n'
                                    '#define UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52\n'
                                    '\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "scene_constants.glsl"\n'
                                    '#ifndef UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define UUID_17297ad6_89fa_3f63_a0e6_0649826544c1\n'
                                    '#define WORK_GROUP_SIZE 64\n'
                                    '#endif /* UUID_17297ad6_89fa_3f63_a0e6_0649826544c1 */\n'
                                    '//------------ INCLUDE -------------//\n'
                                    '// #include "default_material.glsl"\n'
                                    '#ifndef UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66\n'
                                    '#define UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '#ifdef MATERIAL_COMPONENTS\n'
                                    '    uniform float brightness;\n'
                                    '    uniform float reflectance;\n'
                                    '    uniform float roughness;\n'
                                    '    uniform float metalicness;\n'
                                    '    uniform float normal_intensity;\n'
                                    '    uniform vec2 uv_tiling;\n'
                                    '    uniform vec4 emissive_color;\n'
                                    '    uniform vec4 diffuse_color;\n'
                                    '    uniform sampler2D texture_diffuse;\n'
                                    '    uniform sampler2D texture_material;\n'
                                    '    uniform sampler2D texture_normal;\n'
                                    '#if TRANSPARENT_MATERIAL == 1\n'
                                    '#endif\n'
                                    '#endif\n'
                                    '\n'
                                    'vec4 get_emissive_color()\n'
                                    '{\n'
                                    '    return emissive_color;\n'
                                    '}\n'
                                    '\n'
                                    'vec4 get_base_color(vec2 tex_coord)\n'
                                    '{\n'
                                    '    vec4 color = texture2D(texture_diffuse, tex_coord);\n'
                                    '    \n'
                                    '    color.xyz = pow(color.xyz, vec3(2.2));\n'
                                    '    color.xyz = color.xyz * brightness * diffuse_color.xyz;\n'
                                    '    return color;\n'
                                    '}\n'
                                    '\n'
                                    'float get_reflection()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_edge_tint_color()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_sss_color()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float get_sss_scale()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_normal(vec2 tex_coord)\n'
                                    '{\n'
                                    '    \n'
                                    '    vec3 normal = texture2D(texture_normal, tex_coord).xzy * 2.0 - 1.0;\n'
                                    '    normal.xz *= normal_intensity;\n'
                                    '    return normalize(normal);\n'
                                    '}\n'
                                    '\n'
                                    'float get_ior()\n'
                                    '{\n'
                                    '    return 1.0;\n'
                                    '}\n'
                                    '\n'
                                    'float get_roughness()\n'
                                    '{\n'
                                    '    return clamp(roughness, 0.05, 1.0);\n'
                                    '}\n'
                                    '\n'
                                    'float get_metalicness()\n'
                                    '{\n'
                                    '    return metalicness;\n'
                                    '}\n'
                                    '\n'
                                    'vec3 get_world_offset()\n'
                                    '{\n'
                                    '    return vec3(1.0, 1.0, 1.0);\n'
                                    '}\n'
                                    '#endif /* UUID_89391401_fcf5_3a5b_9d99_c1fc4094fb66 */\n'
                                    '\n'
                                    'uniform bool is_instancing;\n'
                                    'uniform mat4 model;\n'
                                    '\n'
                                    '#if 1 == SKELETAL\n'
                                    'uniform mat4 bone_matrices[MAX_BONES];\n'
                                    'uniform mat4 prev_bone_matrices[MAX_BONES];\n'
                                    '#endif\n'
                                    '\n'
                                    'struct VERTEX_OUTPUT\n'
                                    '{\n'
                                    '    vec3 world_position;\n'
                                    '    vec3 vertex_normal;\n'
                                    '    vec4 vertex_color;\n'
                                    '    vec2 tex_coord;\n'
                                    '    mat4 tangent_to_world;\n'
                                    '    vec4 projection_pos;\n'
                                    '    vec4 prev_projection_pos;\n'
                                    '};\n'
                                    '\n'
                                    '\n'
                                    '\n'
                                    '#ifdef VERTEX_SHADER\n'
                                    'layout (location = 0) in vec3 vs_in_position;\n'
                                    'layout (location = 1) in vec4 vs_in_color;\n'
                                    'layout (location = 2) in vec3 vs_in_normal;\n'
                                    'layout (location = 3) in vec3 vs_in_tangent;\n'
                                    'layout (location = 4) in vec2 vs_in_tex_coord;\n'
                                    '#if 1 == SKELETAL\n'
                                    'layout (location = 5) in vec4 vs_in_bone_indicies;\n'
                                    'layout (location = 6) in vec4 vs_in_bone_weights;\n'
                                    '#endif\n'
                                    'layout (location = 7) in mat4 vs_in_isntance_matrix;\n'
                                    '\n'
                                    'layout (location = 0) out VERTEX_OUTPUT vs_output;\n'
                                    '\n'
                                    'void main() {\n'
                                    '    vec4 position = vec4(0.0, 0.0, 0.0, 0.0);\n'
                                    '    vec4 prev_position = vec4(0.0, 0.0, 0.0, 0.0);\n'
                                    '    vec3 vertex_normal = vec3(0.0, 0.0, 0.0);\n'
                                    '    vec3 vertex_tangent = vec3(0.0, 0.0, 0.0);\n'
                                    '\n'
                                    '#if 1 == SKELETAL\n'
                                    '    for(int i=0; i<MAX_BONES_PER_VERTEX; ++i)\n'
                                    '    {\n'
                                    '        prev_position += (prev_bone_matrices[int(vs_in_bone_indicies[i])] * '
                                    'vec4(vs_in_position, 1.0)) * vs_in_bone_weights[i];\n'
                                    '        position += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_position, '
                                    '1.0)) * vs_in_bone_weights[i];\n'
                                    '        vertex_normal += (bone_matrices[int(vs_in_bone_indicies[i])] * vec4(vs_in_normal, '
                                    '0.0)).xyz * vs_in_bone_weights[i];\n'
                                    '        vertex_tangent += (bone_matrices[int(vs_in_bone_indicies[i])] * '
                                    'vec4(vs_in_tangent, 0.0)).xyz * vs_in_bone_weights[i];\n'
                                    '    }\n'
                                    '    position /= position.w;\n'
                                    '    prev_position /= prev_position.w;\n'
                                    '#else\n'
                                    '#endif\n'
                                    '\n'
                                    '    vertex_normal = normalize(vertex_normal);\n'
                                    '    vertex_tangent = normalize(vertex_tangent);\n'
                                    '\n'
                                    '    mat4 local_matrix = is_instancing ? model * vs_in_isntance_matrix : model;\n'
                                    '\n'
                                    '    vs_output.world_position = (local_matrix * position).xyz;\n'
                                    '    vs_output.vertex_normal = vertex_normal;\n'
                                    '    vs_output.vertex_color = vs_in_color;\n'
                                    '    vs_output.tex_coord = vs_in_tex_coord * uv_tiling;\n'
                                    '\n'
                                    '    vec3 bitangent = cross(vertex_tangent, vertex_normal);\n'
                                    '\n'
                                    '    \n'
                                    '    vs_output.tangent_to_world = local_matrix *\n'
                                    '        mat4(vec4(vertex_tangent, 0.0), vec4(vertex_normal, 0.0), vec4(bitangent, 0.0), '
                                    'vec4(0.0, 0.0, 0.0, 1.0));\n'
                                    '\n'
                                    '    position = VIEW_PROJECTION * local_matrix * position;\n'
                                    '    prev_position = PREV_VIEW_PROJECTION * local_matrix * prev_position;\n'
                                    '\n'
                                    '    vs_output.projection_pos = position;\n'
                                    '    vs_output.prev_projection_pos = prev_position;\n'
                                    '\n'
                                    '    gl_Position = position;\n'
                                    '}\n'
                                    '#endif\n'
                                    '#endif /* UUID_e7cc466f_cc36_366b_b9a2_a3817f770d52 */\n'
                                    '\n'
                                    '\n'
                                    '#ifdef FRAGMENT_SHADER\n'
                                    '#endif'},
 'shader_name': 'selected_object',
 'uniforms': [('vec3', 'earth_center'),
              ('vec2', 'sun_size'),
              ('float', 'atmosphere_exposure'),
              ('bool', 'render_light_probe_mode'),
              ('sampler2D', 'transmittance_texture'),
              ('sampler2D', 'irradiance_texture'),
              ('sampler3D', 'scattering_texture'),
              ('sampler3D', 'single_mie_scattering_texture'),
              ('sampler3D', 'single_rayleigh_scattering_texture'),
              ('sampler3D', 'scattering_density_texture'),
              ('sampler3D', 'multiple_scattering_texture'),
              ('vec3', 'SKY_RADIANCE_TO_LUMINANCE'),
              ('vec3', 'SUN_RADIANCE_TO_LUMINANCE'),
              ('float', 'brightness'),
              ('float', 'reflectance'),
              ('float', 'roughness'),
              ('float', 'metalicness'),
              ('float', 'normal_intensity'),
              ('vec2', 'uv_tiling'),
              ('vec4', 'emissive_color'),
              ('vec4', 'diffuse_color'),
              ('sampler2D', 'texture_diffuse'),
              ('sampler2D', 'texture_material'),
              ('sampler2D', 'texture_normal'),
              ('bool', 'is_instancing'),
              ('mat4', 'model'),
              ('mat4', 'bone_matrices'),
              ('mat4', 'prev_bone_matrices')]}
